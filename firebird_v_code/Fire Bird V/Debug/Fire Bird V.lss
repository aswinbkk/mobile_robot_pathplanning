
Fire Bird V.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002d  00800200  00800200  0000134e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000190  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000019f5  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000033a  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ccb  00000000  00000000  0000323d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003f0  00000000  00000000  00003f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000512  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000103b  00000000  00000000  0000480a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000180  00000000  00000000  00005845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c3       	rjmp	.+1568   	; 0x636 <__vector_5>
      16:	00 00       	nop
      18:	e9 c2       	rjmp	.+1490   	; 0x5ec <__vector_6>
      1a:	00 00       	nop
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	00 00       	nop
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	00 00       	nop
      34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
      36:	00 00       	nop
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
      46:	00 00       	nop
      48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
      4e:	00 00       	nop
      50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
      52:	00 00       	nop
      54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
      56:	00 00       	nop
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
      76:	00 00       	nop
      78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
      80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
      8e:	00 00       	nop
      90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
      92:	00 00       	nop
      94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
      96:	00 00       	nop
      98:	79 c0       	rjmp	.+242    	; 0x18c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	77 c0       	rjmp	.+238    	; 0x18c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	75 c0       	rjmp	.+234    	; 0x18c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	73 c0       	rjmp	.+230    	; 0x18c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	71 c0       	rjmp	.+226    	; 0x18c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6f c0       	rjmp	.+222    	; 0x18c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6d c0       	rjmp	.+218    	; 0x18c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6b c0       	rjmp	.+214    	; 0x18c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	69 c0       	rjmp	.+210    	; 0x18c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	67 c0       	rjmp	.+206    	; 0x18c <__bad_interrupt>
      be:	00 00       	nop
      c0:	65 c0       	rjmp	.+202    	; 0x18c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	63 c0       	rjmp	.+198    	; 0x18c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	61 c0       	rjmp	.+194    	; 0x18c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5f c0       	rjmp	.+190    	; 0x18c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5d c0       	rjmp	.+186    	; 0x18c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5b c0       	rjmp	.+182    	; 0x18c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	59 c0       	rjmp	.+178    	; 0x18c <__bad_interrupt>
      da:	00 00       	nop
      dc:	57 c0       	rjmp	.+174    	; 0x18c <__bad_interrupt>
      de:	00 00       	nop
      e0:	55 c0       	rjmp	.+170    	; 0x18c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <move_robot+0xa6>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_clear_bss>:
     176:	22 e0       	ldi	r18, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	ad 32       	cpi	r26, 0x2D	; 45
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	b7 d4       	rcall	.+2414   	; 0xaf6 <main>
     188:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <pin_config>:
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
}
     18e:	81 b1       	in	r24, 0x01	; 1
     190:	8f 60       	ori	r24, 0x0F	; 15
     192:	81 b9       	out	0x01, r24	; 1
     194:	82 b1       	in	r24, 0x02	; 2
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	82 b9       	out	0x02, r24	; 2
     19a:	ea e0       	ldi	r30, 0x0A	; 10
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	80 81       	ld	r24, Z
     1a0:	88 61       	ori	r24, 0x18	; 24
     1a2:	80 83       	st	Z, r24
     1a4:	eb e0       	ldi	r30, 0x0B	; 11
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	80 81       	ld	r24, Z
     1aa:	88 61       	ori	r24, 0x18	; 24
     1ac:	80 83       	st	Z, r24
     1ae:	87 b1       	in	r24, 0x07	; 7
     1b0:	87 6f       	ori	r24, 0xF7	; 247
     1b2:	87 b9       	out	0x07, r24	; 7
     1b4:	88 b1       	in	r24, 0x08	; 8
     1b6:	80 78       	andi	r24, 0x80	; 128
     1b8:	88 b9       	out	0x08, r24	; 8
     1ba:	08 95       	ret

000001bc <left_encoder_pin_config>:
     1bc:	6c 98       	cbi	0x0d, 4	; 13
     1be:	74 9a       	sbi	0x0e, 4	; 14
     1c0:	08 95       	ret

000001c2 <right_encoder_pin_config>:
     1c2:	6d 98       	cbi	0x0d, 5	; 13
     1c4:	75 9a       	sbi	0x0e, 5	; 14
     1c6:	08 95       	ret

000001c8 <adc_pin_config>:
     1c8:	10 ba       	out	0x10, r1	; 16
     1ca:	11 ba       	out	0x11, r1	; 17
     1cc:	10 92 07 01 	sts	0x0107, r1
     1d0:	10 92 08 01 	sts	0x0108, r1
     1d4:	08 95       	ret

000001d6 <port_init>:
     1d6:	db df       	rcall	.-74     	; 0x18e <pin_config>
     1d8:	f1 df       	rcall	.-30     	; 0x1bc <left_encoder_pin_config>
     1da:	f3 df       	rcall	.-26     	; 0x1c2 <right_encoder_pin_config>
     1dc:	f5 cf       	rjmp	.-22     	; 0x1c8 <adc_pin_config>
     1de:	08 95       	ret

000001e0 <adc_init>:
     1e0:	ea e7       	ldi	r30, 0x7A	; 122
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	10 82       	st	Z, r1
     1e6:	10 92 7b 00 	sts	0x007B, r1
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7c 00 	sts	0x007C, r24
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	80 bf       	out	0x30, r24	; 48
     1f4:	86 e8       	ldi	r24, 0x86	; 134
     1f6:	80 83       	st	Z, r24
     1f8:	08 95       	ret

000001fa <ADC_Conversion>:
     1fa:	88 30       	cpi	r24, 0x08	; 8
     1fc:	18 f0       	brcs	.+6      	; 0x204 <ADC_Conversion+0xa>
     1fe:	98 e0       	ldi	r25, 0x08	; 8
     200:	90 93 7b 00 	sts	0x007B, r25
     204:	87 70       	andi	r24, 0x07	; 7
     206:	80 62       	ori	r24, 0x20	; 32
     208:	80 93 7c 00 	sts	0x007C, r24
     20c:	ea e7       	ldi	r30, 0x7A	; 122
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	80 64       	ori	r24, 0x40	; 64
     214:	80 83       	st	Z, r24
     216:	80 81       	ld	r24, Z
     218:	84 ff       	sbrs	r24, 4
     21a:	fd cf       	rjmp	.-6      	; 0x216 <ADC_Conversion+0x1c>
     21c:	80 91 79 00 	lds	r24, 0x0079
     220:	ea e7       	ldi	r30, 0x7A	; 122
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	90 81       	ld	r25, Z
     226:	90 61       	ori	r25, 0x10	; 16
     228:	90 83       	st	Z, r25
     22a:	10 92 7b 00 	sts	0x007B, r1
     22e:	08 95       	ret

00000230 <Sharp_GP2D12_estimation>:
     230:	68 2f       	mov	r22, r24
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	84 d5       	rcall	.+2824   	; 0xd42 <__floatunsisf>
     23a:	2f ee       	ldi	r18, 0xEF	; 239
     23c:	39 ec       	ldi	r19, 0xC9	; 201
     23e:	43 e9       	ldi	r20, 0x93	; 147
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	70 d6       	rcall	.+3296   	; 0xf24 <pow>
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	9f e3       	ldi	r25, 0x3F	; 63
     250:	df d4       	rcall	.+2494   	; 0xc10 <__divsf3>
     252:	2a e9       	ldi	r18, 0x9A	; 154
     254:	39 ef       	ldi	r19, 0xF9	; 249
     256:	4e e2       	ldi	r20, 0x2E	; 46
     258:	55 e4       	ldi	r21, 0x45	; 69
     25a:	01 d6       	rcall	.+3074   	; 0xe5e <__mulsf3>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e2       	ldi	r20, 0x20	; 32
     262:	51 e4       	ldi	r21, 0x41	; 65
     264:	fc d5       	rcall	.+3064   	; 0xe5e <__mulsf3>
     266:	3c d5       	rcall	.+2680   	; 0xce0 <__fixsfsi>
     268:	cb 01       	movw	r24, r22
     26a:	61 32       	cpi	r22, 0x21	; 33
     26c:	23 e0       	ldi	r18, 0x03	; 3
     26e:	72 07       	cpc	r23, r18
     270:	10 f0       	brcs	.+4      	; 0x276 <Sharp_GP2D12_estimation+0x46>
     272:	80 e2       	ldi	r24, 0x20	; 32
     274:	93 e0       	ldi	r25, 0x03	; 3
     276:	08 95       	ret

00000278 <lcd_set_4bit>:
     278:	86 e6       	ldi	r24, 0x66	; 102
     27a:	9e e0       	ldi	r25, 0x0E	; 14
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_set_4bit+0x4>
     280:	00 00       	nop
     282:	40 98       	cbi	0x08, 0	; 8
     284:	41 98       	cbi	0x08, 1	; 8
     286:	80 e3       	ldi	r24, 0x30	; 48
     288:	88 b9       	out	0x08, r24	; 8
     28a:	42 9a       	sbi	0x08, 2	; 8
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	97 e4       	ldi	r25, 0x47	; 71
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <lcd_set_4bit+0x18>
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_set_4bit+0x1e>
     296:	00 00       	nop
     298:	42 98       	cbi	0x08, 2	; 8
     29a:	86 e6       	ldi	r24, 0x66	; 102
     29c:	9e e0       	ldi	r25, 0x0E	; 14
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_set_4bit+0x26>
     2a2:	00 00       	nop
     2a4:	40 98       	cbi	0x08, 0	; 8
     2a6:	41 98       	cbi	0x08, 1	; 8
     2a8:	80 e3       	ldi	r24, 0x30	; 48
     2aa:	88 b9       	out	0x08, r24	; 8
     2ac:	42 9a       	sbi	0x08, 2	; 8
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	97 e4       	ldi	r25, 0x47	; 71
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_set_4bit+0x3a>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_set_4bit+0x40>
     2b8:	00 00       	nop
     2ba:	42 98       	cbi	0x08, 2	; 8
     2bc:	86 e6       	ldi	r24, 0x66	; 102
     2be:	9e e0       	ldi	r25, 0x0E	; 14
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_set_4bit+0x48>
     2c4:	00 00       	nop
     2c6:	40 98       	cbi	0x08, 0	; 8
     2c8:	41 98       	cbi	0x08, 1	; 8
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	88 b9       	out	0x08, r24	; 8
     2ce:	42 9a       	sbi	0x08, 2	; 8
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	97 e4       	ldi	r25, 0x47	; 71
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_set_4bit+0x5c>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_set_4bit+0x62>
     2da:	00 00       	nop
     2dc:	42 98       	cbi	0x08, 2	; 8
     2de:	86 e6       	ldi	r24, 0x66	; 102
     2e0:	9e e0       	ldi	r25, 0x0E	; 14
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_set_4bit+0x6a>
     2e6:	00 00       	nop
     2e8:	40 98       	cbi	0x08, 0	; 8
     2ea:	41 98       	cbi	0x08, 1	; 8
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	88 b9       	out	0x08, r24	; 8
     2f0:	42 9a       	sbi	0x08, 2	; 8
     2f2:	86 e6       	ldi	r24, 0x66	; 102
     2f4:	9e e0       	ldi	r25, 0x0E	; 14
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_set_4bit+0x7e>
     2fa:	00 00       	nop
     2fc:	42 98       	cbi	0x08, 2	; 8
     2fe:	08 95       	ret

00000300 <lcd_wr_command>:
     300:	98 b1       	in	r25, 0x08	; 8
     302:	9f 70       	andi	r25, 0x0F	; 15
     304:	98 b9       	out	0x08, r25	; 8
     306:	98 b1       	in	r25, 0x08	; 8
     308:	28 2f       	mov	r18, r24
     30a:	20 7f       	andi	r18, 0xF0	; 240
     30c:	92 2b       	or	r25, r18
     30e:	98 b9       	out	0x08, r25	; 8
     310:	40 98       	cbi	0x08, 0	; 8
     312:	41 98       	cbi	0x08, 1	; 8
     314:	42 9a       	sbi	0x08, 2	; 8
     316:	ef ef       	ldi	r30, 0xFF	; 255
     318:	f7 e4       	ldi	r31, 0x47	; 71
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_wr_command+0x1a>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_wr_command+0x20>
     320:	00 00       	nop
     322:	42 98       	cbi	0x08, 2	; 8
     324:	98 b1       	in	r25, 0x08	; 8
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	98 b9       	out	0x08, r25	; 8
     32a:	98 b1       	in	r25, 0x08	; 8
     32c:	82 95       	swap	r24
     32e:	80 7f       	andi	r24, 0xF0	; 240
     330:	89 2b       	or	r24, r25
     332:	88 b9       	out	0x08, r24	; 8
     334:	40 98       	cbi	0x08, 0	; 8
     336:	41 98       	cbi	0x08, 1	; 8
     338:	42 9a       	sbi	0x08, 2	; 8
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	97 e4       	ldi	r25, 0x47	; 71
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_wr_command+0x3e>
     342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_wr_command+0x44>
     344:	00 00       	nop
     346:	42 98       	cbi	0x08, 2	; 8
     348:	08 95       	ret

0000034a <lcd_init>:
     34a:	86 e6       	ldi	r24, 0x66	; 102
     34c:	9e e0       	ldi	r25, 0x0E	; 14
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x4>
     352:	00 00       	nop
     354:	88 e2       	ldi	r24, 0x28	; 40
     356:	d4 df       	rcall	.-88     	; 0x300 <lcd_wr_command>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	d2 df       	rcall	.-92     	; 0x300 <lcd_wr_command>
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	d0 df       	rcall	.-96     	; 0x300 <lcd_wr_command>
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	ce df       	rcall	.-100    	; 0x300 <lcd_wr_command>
     364:	80 e8       	ldi	r24, 0x80	; 128
     366:	cc cf       	rjmp	.-104    	; 0x300 <lcd_wr_command>
     368:	08 95       	ret

0000036a <lcd_wr_char>:
     36a:	98 b1       	in	r25, 0x08	; 8
     36c:	9f 70       	andi	r25, 0x0F	; 15
     36e:	98 b9       	out	0x08, r25	; 8
     370:	98 b1       	in	r25, 0x08	; 8
     372:	28 2f       	mov	r18, r24
     374:	20 7f       	andi	r18, 0xF0	; 240
     376:	92 2b       	or	r25, r18
     378:	98 b9       	out	0x08, r25	; 8
     37a:	40 9a       	sbi	0x08, 0	; 8
     37c:	41 98       	cbi	0x08, 1	; 8
     37e:	42 9a       	sbi	0x08, 2	; 8
     380:	ef ef       	ldi	r30, 0xFF	; 255
     382:	f7 e4       	ldi	r31, 0x47	; 71
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <lcd_wr_char+0x1a>
     388:	00 c0       	rjmp	.+0      	; 0x38a <lcd_wr_char+0x20>
     38a:	00 00       	nop
     38c:	42 98       	cbi	0x08, 2	; 8
     38e:	98 b1       	in	r25, 0x08	; 8
     390:	9f 70       	andi	r25, 0x0F	; 15
     392:	98 b9       	out	0x08, r25	; 8
     394:	98 b1       	in	r25, 0x08	; 8
     396:	82 95       	swap	r24
     398:	80 7f       	andi	r24, 0xF0	; 240
     39a:	89 2b       	or	r24, r25
     39c:	88 b9       	out	0x08, r24	; 8
     39e:	40 9a       	sbi	0x08, 0	; 8
     3a0:	41 98       	cbi	0x08, 1	; 8
     3a2:	42 9a       	sbi	0x08, 2	; 8
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	97 e4       	ldi	r25, 0x47	; 71
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_wr_char+0x3e>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_wr_char+0x44>
     3ae:	00 00       	nop
     3b0:	42 98       	cbi	0x08, 2	; 8
     3b2:	08 95       	ret

000003b4 <lcd_home>:
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	a4 cf       	rjmp	.-184    	; 0x300 <lcd_wr_command>
     3b8:	08 95       	ret

000003ba <lcd_cursor>:
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	69 f0       	breq	.+26     	; 0x3d8 <lcd_cursor+0x1e>
     3be:	18 f4       	brcc	.+6      	; 0x3c6 <lcd_cursor+0xc>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	31 f0       	breq	.+12     	; 0x3d0 <lcd_cursor+0x16>
     3c4:	08 95       	ret
     3c6:	83 30       	cpi	r24, 0x03	; 3
     3c8:	59 f0       	breq	.+22     	; 0x3e0 <lcd_cursor+0x26>
     3ca:	84 30       	cpi	r24, 0x04	; 4
     3cc:	69 f0       	breq	.+26     	; 0x3e8 <lcd_cursor+0x2e>
     3ce:	08 95       	ret
     3d0:	8f e7       	ldi	r24, 0x7F	; 127
     3d2:	86 0f       	add	r24, r22
     3d4:	95 cf       	rjmp	.-214    	; 0x300 <lcd_wr_command>
     3d6:	08 95       	ret
     3d8:	8f eb       	ldi	r24, 0xBF	; 191
     3da:	86 0f       	add	r24, r22
     3dc:	91 cf       	rjmp	.-222    	; 0x300 <lcd_wr_command>
     3de:	08 95       	ret
     3e0:	83 e9       	ldi	r24, 0x93	; 147
     3e2:	86 0f       	add	r24, r22
     3e4:	8d cf       	rjmp	.-230    	; 0x300 <lcd_wr_command>
     3e6:	08 95       	ret
     3e8:	83 ed       	ldi	r24, 0xD3	; 211
     3ea:	86 0f       	add	r24, r22
     3ec:	89 cf       	rjmp	.-238    	; 0x300 <lcd_wr_command>
     3ee:	08 95       	ret

000003f0 <lcd_print>:
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	8a 01       	movw	r16, r20
     3fa:	e9 01       	movw	r28, r18
     3fc:	88 23       	and	r24, r24
     3fe:	11 f0       	breq	.+4      	; 0x404 <lcd_print+0x14>
     400:	61 11       	cpse	r22, r1
     402:	02 c0       	rjmp	.+4      	; 0x408 <lcd_print+0x18>
     404:	d7 df       	rcall	.-82     	; 0x3b4 <lcd_home>
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_print+0x1a>
     408:	d8 df       	rcall	.-80     	; 0x3ba <lcd_cursor>
     40a:	c5 30       	cpi	r28, 0x05	; 5
     40c:	d1 05       	cpc	r29, r1
     40e:	09 f0       	breq	.+2      	; 0x412 <lcd_print+0x22>
     410:	cd c0       	rjmp	.+410    	; 0x5ac <lcd_print+0x1bc>
     412:	98 01       	movw	r18, r16
     414:	32 95       	swap	r19
     416:	22 95       	swap	r18
     418:	2f 70       	andi	r18, 0x0F	; 15
     41a:	23 27       	eor	r18, r19
     41c:	3f 70       	andi	r19, 0x0F	; 15
     41e:	23 27       	eor	r18, r19
     420:	a7 e4       	ldi	r26, 0x47	; 71
     422:	b3 e0       	ldi	r27, 0x03	; 3
     424:	49 d7       	rcall	.+3730   	; 0x12b8 <__umulhisi3>
     426:	96 95       	lsr	r25
     428:	87 95       	ror	r24
     42a:	96 95       	lsr	r25
     42c:	87 95       	ror	r24
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	c0 96       	adiw	r24, 0x30	; 48
     434:	90 93 0c 02 	sts	0x020C, r25
     438:	80 93 0b 02 	sts	0x020B, r24
     43c:	96 df       	rcall	.-212    	; 0x36a <lcd_wr_char>
     43e:	98 01       	movw	r18, r16
     440:	36 95       	lsr	r19
     442:	27 95       	ror	r18
     444:	36 95       	lsr	r19
     446:	27 95       	ror	r18
     448:	36 95       	lsr	r19
     44a:	27 95       	ror	r18
     44c:	a5 ec       	ldi	r26, 0xC5	; 197
     44e:	b0 e2       	ldi	r27, 0x20	; 32
     450:	33 d7       	rcall	.+3686   	; 0x12b8 <__umulhisi3>
     452:	ac 01       	movw	r20, r24
     454:	52 95       	swap	r21
     456:	42 95       	swap	r20
     458:	4f 70       	andi	r20, 0x0F	; 15
     45a:	45 27       	eor	r20, r21
     45c:	5f 70       	andi	r21, 0x0F	; 15
     45e:	45 27       	eor	r20, r21
     460:	50 93 16 02 	sts	0x0216, r21
     464:	40 93 15 02 	sts	0x0215, r20
     468:	9a 01       	movw	r18, r20
     46a:	ad ec       	ldi	r26, 0xCD	; 205
     46c:	bc ec       	ldi	r27, 0xCC	; 204
     46e:	24 d7       	rcall	.+3656   	; 0x12b8 <__umulhisi3>
     470:	96 95       	lsr	r25
     472:	87 95       	ror	r24
     474:	96 95       	lsr	r25
     476:	87 95       	ror	r24
     478:	96 95       	lsr	r25
     47a:	87 95       	ror	r24
     47c:	9c 01       	movw	r18, r24
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
     492:	48 1b       	sub	r20, r24
     494:	59 0b       	sbc	r21, r25
     496:	ca 01       	movw	r24, r20
     498:	c0 96       	adiw	r24, 0x30	; 48
     49a:	90 93 29 02 	sts	0x0229, r25
     49e:	80 93 28 02 	sts	0x0228, r24
     4a2:	63 df       	rcall	.-314    	; 0x36a <lcd_wr_char>
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <lcd_print+0xbe>
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	d1 05       	cpc	r29, r1
     4aa:	09 f0       	breq	.+2      	; 0x4ae <lcd_print+0xbe>
     4ac:	84 c0       	rjmp	.+264    	; 0x5b6 <lcd_print+0x1c6>
     4ae:	98 01       	movw	r18, r16
     4b0:	36 95       	lsr	r19
     4b2:	27 95       	ror	r18
     4b4:	36 95       	lsr	r19
     4b6:	27 95       	ror	r18
     4b8:	ab e7       	ldi	r26, 0x7B	; 123
     4ba:	b4 e1       	ldi	r27, 0x14	; 20
     4bc:	fd d6       	rcall	.+3578   	; 0x12b8 <__umulhisi3>
     4be:	ac 01       	movw	r20, r24
     4c0:	56 95       	lsr	r21
     4c2:	47 95       	ror	r20
     4c4:	50 93 16 02 	sts	0x0216, r21
     4c8:	40 93 15 02 	sts	0x0215, r20
     4cc:	9a 01       	movw	r18, r20
     4ce:	ad ec       	ldi	r26, 0xCD	; 205
     4d0:	bc ec       	ldi	r27, 0xCC	; 204
     4d2:	f2 d6       	rcall	.+3556   	; 0x12b8 <__umulhisi3>
     4d4:	96 95       	lsr	r25
     4d6:	87 95       	ror	r24
     4d8:	96 95       	lsr	r25
     4da:	87 95       	ror	r24
     4dc:	96 95       	lsr	r25
     4de:	87 95       	ror	r24
     4e0:	9c 01       	movw	r18, r24
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	48 1b       	sub	r20, r24
     4f8:	59 0b       	sbc	r21, r25
     4fa:	ca 01       	movw	r24, r20
     4fc:	c0 96       	adiw	r24, 0x30	; 48
     4fe:	90 93 23 02 	sts	0x0223, r25
     502:	80 93 22 02 	sts	0x0222, r24
     506:	31 df       	rcall	.-414    	; 0x36a <lcd_wr_char>
     508:	98 01       	movw	r18, r16
     50a:	ad ec       	ldi	r26, 0xCD	; 205
     50c:	bc ec       	ldi	r27, 0xCC	; 204
     50e:	d4 d6       	rcall	.+3496   	; 0x12b8 <__umulhisi3>
     510:	ac 01       	movw	r20, r24
     512:	56 95       	lsr	r21
     514:	47 95       	ror	r20
     516:	56 95       	lsr	r21
     518:	47 95       	ror	r20
     51a:	56 95       	lsr	r21
     51c:	47 95       	ror	r20
     51e:	50 93 16 02 	sts	0x0216, r21
     522:	40 93 15 02 	sts	0x0215, r20
     526:	9a 01       	movw	r18, r20
     528:	c7 d6       	rcall	.+3470   	; 0x12b8 <__umulhisi3>
     52a:	96 95       	lsr	r25
     52c:	87 95       	ror	r24
     52e:	96 95       	lsr	r25
     530:	87 95       	ror	r24
     532:	96 95       	lsr	r25
     534:	87 95       	ror	r24
     536:	9c 01       	movw	r18, r24
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	82 0f       	add	r24, r18
     54a:	93 1f       	adc	r25, r19
     54c:	48 1b       	sub	r20, r24
     54e:	59 0b       	sbc	r21, r25
     550:	ca 01       	movw	r24, r20
     552:	c0 96       	adiw	r24, 0x30	; 48
     554:	90 93 1f 02 	sts	0x021F, r25
     558:	80 93 1e 02 	sts	0x021E, r24
     55c:	06 df       	rcall	.-500    	; 0x36a <lcd_wr_char>
     55e:	03 c0       	rjmp	.+6      	; 0x566 <lcd_print+0x176>
     560:	c1 30       	cpi	r28, 0x01	; 1
     562:	d1 05       	cpc	r29, r1
     564:	f1 f4       	brne	.+60     	; 0x5a2 <lcd_print+0x1b2>
     566:	98 01       	movw	r18, r16
     568:	ad ec       	ldi	r26, 0xCD	; 205
     56a:	bc ec       	ldi	r27, 0xCC	; 204
     56c:	a5 d6       	rcall	.+3402   	; 0x12b8 <__umulhisi3>
     56e:	96 95       	lsr	r25
     570:	87 95       	ror	r24
     572:	96 95       	lsr	r25
     574:	87 95       	ror	r24
     576:	96 95       	lsr	r25
     578:	87 95       	ror	r24
     57a:	9c 01       	movw	r18, r24
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	82 0f       	add	r24, r18
     58e:	93 1f       	adc	r25, r19
     590:	08 1b       	sub	r16, r24
     592:	19 0b       	sbc	r17, r25
     594:	c8 01       	movw	r24, r16
     596:	c0 96       	adiw	r24, 0x30	; 48
     598:	90 93 27 02 	sts	0x0227, r25
     59c:	80 93 26 02 	sts	0x0226, r24
     5a0:	e4 de       	rcall	.-568    	; 0x36a <lcd_wr_char>
     5a2:	26 97       	sbiw	r28, 0x06	; 6
     5a4:	64 f0       	brlt	.+24     	; 0x5be <lcd_print+0x1ce>
     5a6:	85 e4       	ldi	r24, 0x45	; 69
     5a8:	e0 de       	rcall	.-576    	; 0x36a <lcd_wr_char>
     5aa:	09 c0       	rjmp	.+18     	; 0x5be <lcd_print+0x1ce>
     5ac:	c4 30       	cpi	r28, 0x04	; 4
     5ae:	d1 05       	cpc	r29, r1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <lcd_print+0x1c4>
     5b2:	79 cf       	rjmp	.-270    	; 0x4a6 <lcd_print+0xb6>
     5b4:	44 cf       	rjmp	.-376    	; 0x43e <lcd_print+0x4e>
     5b6:	c2 30       	cpi	r28, 0x02	; 2
     5b8:	d1 05       	cpc	r29, r1
     5ba:	91 f6       	brne	.-92     	; 0x560 <lcd_print+0x170>
     5bc:	a5 cf       	rjmp	.-182    	; 0x508 <lcd_print+0x118>
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <left_position_encoder_interrupt_init>:
     5c8:	f8 94       	cli
     5ca:	ea e6       	ldi	r30, 0x6A	; 106
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	80 83       	st	Z, r24
     5d4:	ec 9a       	sbi	0x1d, 4	; 29
     5d6:	78 94       	sei
     5d8:	08 95       	ret

000005da <right_position_encoder_interrupt_init>:
     5da:	f8 94       	cli
     5dc:	ea e6       	ldi	r30, 0x6A	; 106
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	80 83       	st	Z, r24
     5e6:	ed 9a       	sbi	0x1d, 5	; 29
     5e8:	78 94       	sei
     5ea:	08 95       	ret

000005ec <__vector_6>:
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	80 91 00 02 	lds	r24, 0x0200
     602:	90 91 01 02 	lds	r25, 0x0201
     606:	a0 91 02 02 	lds	r26, 0x0202
     60a:	b0 91 03 02 	lds	r27, 0x0203
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	a1 1d       	adc	r26, r1
     612:	b1 1d       	adc	r27, r1
     614:	80 93 00 02 	sts	0x0200, r24
     618:	90 93 01 02 	sts	0x0201, r25
     61c:	a0 93 02 02 	sts	0x0202, r26
     620:	b0 93 03 02 	sts	0x0203, r27
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <__vector_5>:
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
     648:	80 91 04 02 	lds	r24, 0x0204
     64c:	90 91 05 02 	lds	r25, 0x0205
     650:	a0 91 06 02 	lds	r26, 0x0206
     654:	b0 91 07 02 	lds	r27, 0x0207
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	a1 1d       	adc	r26, r1
     65c:	b1 1d       	adc	r27, r1
     65e:	80 93 04 02 	sts	0x0204, r24
     662:	90 93 05 02 	sts	0x0205, r25
     666:	a0 93 06 02 	sts	0x0206, r26
     66a:	b0 93 07 02 	sts	0x0207, r27
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <motion_set>:
     680:	92 b1       	in	r25, 0x02	; 2
     682:	90 7f       	andi	r25, 0xF0	; 240
     684:	8f 70       	andi	r24, 0x0F	; 15
     686:	98 2b       	or	r25, r24
     688:	92 b9       	out	0x02, r25	; 2
     68a:	08 95       	ret

0000068c <forward>:
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	f8 cf       	rjmp	.-16     	; 0x680 <motion_set>
     690:	08 95       	ret

00000692 <left>:
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	f5 cf       	rjmp	.-22     	; 0x680 <motion_set>
     696:	08 95       	ret

00000698 <right>:
     698:	8a e0       	ldi	r24, 0x0A	; 10
     69a:	f2 cf       	rjmp	.-28     	; 0x680 <motion_set>
     69c:	08 95       	ret

0000069e <stop>:
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	ef cf       	rjmp	.-34     	; 0x680 <motion_set>
     6a2:	08 95       	ret

000006a4 <angle_rotate>:
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	bc 01       	movw	r22, r24
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	45 d3       	rcall	.+1674   	; 0xd42 <__floatunsisf>
     6b8:	28 e4       	ldi	r18, 0x48	; 72
     6ba:	31 ee       	ldi	r19, 0xE1	; 225
     6bc:	42 e8       	ldi	r20, 0x82	; 130
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	a7 d2       	rcall	.+1358   	; 0xc10 <__divsf3>
     6c2:	13 d3       	rcall	.+1574   	; 0xcea <__fixunssfsi>
     6c4:	cb 01       	movw	r24, r22
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	10 92 00 02 	sts	0x0200, r1
     6ce:	10 92 01 02 	sts	0x0201, r1
     6d2:	10 92 02 02 	sts	0x0202, r1
     6d6:	10 92 03 02 	sts	0x0203, r1
     6da:	10 92 04 02 	sts	0x0204, r1
     6de:	10 92 05 02 	sts	0x0205, r1
     6e2:	10 92 06 02 	sts	0x0206, r1
     6e6:	10 92 07 02 	sts	0x0207, r1
     6ea:	51 e0       	ldi	r21, 0x01	; 1
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
     6ee:	c0 90 00 02 	lds	r12, 0x0200
     6f2:	d0 90 01 02 	lds	r13, 0x0201
     6f6:	e0 90 02 02 	lds	r14, 0x0202
     6fa:	f0 90 03 02 	lds	r15, 0x0203
     6fe:	00 91 04 02 	lds	r16, 0x0204
     702:	10 91 05 02 	lds	r17, 0x0205
     706:	20 91 06 02 	lds	r18, 0x0206
     70a:	30 91 07 02 	lds	r19, 0x0207
     70e:	45 2f       	mov	r20, r21
     710:	08 17       	cp	r16, r24
     712:	19 07       	cpc	r17, r25
     714:	2a 07       	cpc	r18, r26
     716:	3b 07       	cpc	r19, r27
     718:	08 f4       	brcc	.+2      	; 0x71c <angle_rotate+0x78>
     71a:	4e 2f       	mov	r20, r30
     71c:	41 11       	cpse	r20, r1
     71e:	09 c0       	rjmp	.+18     	; 0x732 <angle_rotate+0x8e>
     720:	25 2f       	mov	r18, r21
     722:	c8 16       	cp	r12, r24
     724:	d9 06       	cpc	r13, r25
     726:	ea 06       	cpc	r14, r26
     728:	fb 06       	cpc	r15, r27
     72a:	08 f4       	brcc	.+2      	; 0x72e <angle_rotate+0x8a>
     72c:	2e 2f       	mov	r18, r30
     72e:	22 23       	and	r18, r18
     730:	f1 f2       	breq	.-68     	; 0x6ee <angle_rotate+0x4a>
     732:	b5 df       	rcall	.-150    	; 0x69e <stop>
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	08 95       	ret

00000742 <linear_distance_mm>:
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	bc 01       	movw	r22, r24
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fa d2       	rcall	.+1524   	; 0xd42 <__floatunsisf>
     74e:	25 ee       	ldi	r18, 0xE5	; 229
     750:	30 ed       	ldi	r19, 0xD0	; 208
     752:	4a ea       	ldi	r20, 0xAA	; 170
     754:	50 e4       	ldi	r21, 0x40	; 64
     756:	5c d2       	rcall	.+1208   	; 0xc10 <__divsf3>
     758:	c8 d2       	rcall	.+1424   	; 0xcea <__fixunssfsi>
     75a:	10 92 00 02 	sts	0x0200, r1
     75e:	10 92 01 02 	sts	0x0201, r1
     762:	10 92 02 02 	sts	0x0202, r1
     766:	10 92 03 02 	sts	0x0203, r1
     76a:	00 91 00 02 	lds	r16, 0x0200
     76e:	10 91 01 02 	lds	r17, 0x0201
     772:	20 91 02 02 	lds	r18, 0x0202
     776:	30 91 03 02 	lds	r19, 0x0203
     77a:	60 17       	cp	r22, r16
     77c:	71 07       	cpc	r23, r17
     77e:	82 07       	cpc	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	98 f7       	brcc	.-26     	; 0x76a <linear_distance_mm+0x28>
     784:	8c df       	rcall	.-232    	; 0x69e <stop>
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <forward_mm>:
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ec 01       	movw	r28, r24
     792:	7c df       	rcall	.-264    	; 0x68c <forward>
     794:	ce 01       	movw	r24, r28
     796:	d5 df       	rcall	.-86     	; 0x742 <linear_distance_mm>
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <left_degrees>:
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
     7a4:	76 df       	rcall	.-276    	; 0x692 <left>
     7a6:	ce 01       	movw	r24, r28
     7a8:	7d df       	rcall	.-262    	; 0x6a4 <angle_rotate>
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <right_degrees>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
     7b6:	70 df       	rcall	.-288    	; 0x698 <right>
     7b8:	ce 01       	movw	r24, r28
     7ba:	74 df       	rcall	.-280    	; 0x6a4 <angle_rotate>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <USART_Init>:

void USART_Init(void) {
	// set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
     7c2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(UBRR_VALUE);
     7c6:	8f e5       	ldi	r24, 0x5F	; 95
     7c8:	80 93 c4 00 	sts	0x00C4, r24

	// enable transmitter and receiver
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
     7cc:	88 e1       	ldi	r24, 0x18	; 24
     7ce:	80 93 c1 00 	sts	0x00C1, r24

	// set frame format: 8 data bits, no parity, 1 stop bit
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	80 93 c2 00 	sts	0x00C2, r24
     7d8:	08 95       	ret

000007da <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
     7da:	e0 ec       	ldi	r30, 0xC0	; 192
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	90 81       	ld	r25, Z
     7e0:	95 ff       	sbrs	r25, 5
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <USART_Transmit+0x4>

	// put data into buffer, sends data
	UDR0 = data;
     7e4:	80 93 c6 00 	sts	0x00C6, r24
     7e8:	08 95       	ret

000007ea <USART_Receive>:
}

uint8_t USART_Receive(void) {
	// wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
     7ea:	e0 ec       	ldi	r30, 0xC0	; 192
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	88 23       	and	r24, r24
     7f2:	ec f7       	brge	.-6      	; 0x7ee <USART_Receive+0x4>

	// get and return received data from buffer
	return UDR0;
     7f4:	80 91 c6 00 	lds	r24, 0x00C6
}
     7f8:	08 95       	ret

000007fa <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
     7fa:	f8 94       	cli
	port_init();
     7fc:	ec dc       	rcall	.-1576   	; 0x1d6 <port_init>
	adc_init();
     7fe:	f0 dc       	rcall	.-1568   	; 0x1e0 <adc_init>
	left_position_encoder_interrupt_init();
     800:	e3 de       	rcall	.-570    	; 0x5c8 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     802:	eb de       	rcall	.-554    	; 0x5da <right_position_encoder_interrupt_init>
	sei(); //Enables the global interrupts
     804:	78 94       	sei
     806:	08 95       	ret

00000808 <check_pin>:
}

void check_pin()
{
	row1 = USART_Receive(); // receive data from UART
     808:	f0 df       	rcall	.-32     	; 0x7ea <USART_Receive>
     80a:	80 93 0d 02 	sts	0x020D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	9c e2       	ldi	r25, 0x2C	; 44
     814:	21 50       	subi	r18, 0x01	; 1
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <check_pin+0xc>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <check_pin+0x16>
     81e:	00 00       	nop
	_delay_ms(1000);
	lcd_print(1,1,row1,3);
     820:	40 91 0d 02 	lds	r20, 0x020D
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	e0 dd       	rcall	.-1088   	; 0x3f0 <lcd_print>
	
	USART_Transmit('0');
     830:	80 e3       	ldi	r24, 0x30	; 48
     832:	d3 df       	rcall	.-90     	; 0x7da <USART_Transmit>
	column1 = USART_Receive(); // receive data from UART
     834:	da df       	rcall	.-76     	; 0x7ea <USART_Receive>
     836:	80 93 19 02 	sts	0x0219, r24
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9c e2       	ldi	r25, 0x2C	; 44
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <check_pin+0x38>
     848:	00 c0       	rjmp	.+0      	; 0x84a <check_pin+0x42>
     84a:	00 00       	nop
	_delay_ms(1000);
	lcd_print(1,5,column1,3);
     84c:	40 91 19 02 	lds	r20, 0x0219
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	23 e0       	ldi	r18, 0x03	; 3
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	65 e0       	ldi	r22, 0x05	; 5
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	ca dd       	rcall	.-1132   	; 0x3f0 <lcd_print>

	USART_Transmit('1');
     85c:	81 e3       	ldi	r24, 0x31	; 49
     85e:	bd df       	rcall	.-134    	; 0x7da <USART_Transmit>
	row2 = USART_Receive(); // receive data from UART
     860:	c4 df       	rcall	.-120    	; 0x7ea <USART_Receive>
     862:	80 93 24 02 	sts	0x0224, r24
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	9c e2       	ldi	r25, 0x2C	; 44
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	80 40       	sbci	r24, 0x00	; 0
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <check_pin+0x64>
     874:	00 c0       	rjmp	.+0      	; 0x876 <check_pin+0x6e>
     876:	00 00       	nop
	_delay_ms(1000);
	lcd_print(1,10,row2,3);
     878:	40 91 24 02 	lds	r20, 0x0224
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	23 e0       	ldi	r18, 0x03	; 3
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	6a e0       	ldi	r22, 0x0A	; 10
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	b4 dd       	rcall	.-1176   	; 0x3f0 <lcd_print>
	
	USART_Transmit('0');
     888:	80 e3       	ldi	r24, 0x30	; 48
     88a:	a7 df       	rcall	.-178    	; 0x7da <USART_Transmit>
	column2 = USART_Receive(); // receive data from UART
     88c:	ae df       	rcall	.-164    	; 0x7ea <USART_Receive>
     88e:	80 93 2c 02 	sts	0x022C, r24
     892:	2f ef       	ldi	r18, 0xFF	; 255
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	9c e2       	ldi	r25, 0x2C	; 44
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	80 40       	sbci	r24, 0x00	; 0
     89c:	90 40       	sbci	r25, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <check_pin+0x90>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <check_pin+0x9a>
     8a2:	00 00       	nop
	_delay_ms(1000);
	lcd_print(1,14,column2,3);
     8a4:	40 91 2c 02 	lds	r20, 0x022C
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	23 e0       	ldi	r18, 0x03	; 3
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	6e e0       	ldi	r22, 0x0E	; 14
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	9e dd       	rcall	.-1220   	; 0x3f0 <lcd_print>
	USART_Transmit('1');
     8b4:	81 e3       	ldi	r24, 0x31	; 49
     8b6:	91 cf       	rjmp	.-222    	; 0x7da <USART_Transmit>
     8b8:	08 95       	ret

000008ba <move_robot>:
}
void move_robot()
{
	if ((row1==row2) && (column1<column2))
     8ba:	90 91 0d 02 	lds	r25, 0x020D
     8be:	80 91 24 02 	lds	r24, 0x0224
     8c2:	98 13       	cpse	r25, r24
     8c4:	67 c0       	rjmp	.+206    	; 0x994 <move_robot+0xda>
     8c6:	90 91 19 02 	lds	r25, 0x0219
     8ca:	80 91 2c 02 	lds	r24, 0x022C
     8ce:	98 17       	cp	r25, r24
     8d0:	78 f5       	brcc	.+94     	; 0x930 <move_robot+0x76>
	{ // if column1 is to the left of column2
		left_degrees(90); //Rotate robot left by 90 degrees
     8d2:	8a e5       	ldi	r24, 0x5A	; 90
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	63 df       	rcall	.-314    	; 0x79e <left_degrees>
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	9c e2       	ldi	r25, 0x2C	; 44
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	80 40       	sbci	r24, 0x00	; 0
     8e2:	90 40       	sbci	r25, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <move_robot+0x24>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <move_robot+0x2e>
     8e8:	00 00       	nop
		_delay_ms(1000);
		forward_mm(200); //Moves robot forward 100mm
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	4e df       	rcall	.-356    	; 0x78c <forward_mm>
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	9c e2       	ldi	r25, 0x2C	; 44
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <move_robot+0x3c>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <move_robot+0x46>
     900:	00 00       	nop
		_delay_ms(1000);
		right_degrees(90); //Rotate robot right by 90 degrees
     902:	8a e5       	ldi	r24, 0x5A	; 90
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	54 df       	rcall	.-344    	; 0x7b0 <right_degrees>
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9c e2       	ldi	r25, 0x2C	; 44
     90e:	21 50       	subi	r18, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <move_robot+0x54>
     916:	00 c0       	rjmp	.+0      	; 0x918 <move_robot+0x5e>
     918:	00 00       	nop
		_delay_ms(1000);
		stop();
     91a:	c1 de       	rcall	.-638    	; 0x69e <stop>
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	9c e2       	ldi	r25, 0x2C	; 44
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <move_robot+0x68>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <move_robot+0x72>
     92c:	00 00       	nop
     92e:	87 c0       	rjmp	.+270    	; 0xa3e <move_robot+0x184>
		_delay_ms(1000);
	}
	else if ((row1==row2) && (column1>column2))
     930:	89 17       	cp	r24, r25
     932:	08 f0       	brcs	.+2      	; 0x936 <move_robot+0x7c>
     934:	84 c0       	rjmp	.+264    	; 0xa3e <move_robot+0x184>
	{ // if column1 is to the left of column2
		right_degrees(90); //Rotate robot right by 90 degrees
     936:	8a e5       	ldi	r24, 0x5A	; 90
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	3a df       	rcall	.-396    	; 0x7b0 <right_degrees>
     93c:	2f ef       	ldi	r18, 0xFF	; 255
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9c e2       	ldi	r25, 0x2C	; 44
     942:	21 50       	subi	r18, 0x01	; 1
     944:	80 40       	sbci	r24, 0x00	; 0
     946:	90 40       	sbci	r25, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <move_robot+0x88>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <move_robot+0x92>
     94c:	00 00       	nop
		_delay_ms(1000);
		forward_mm(200); //Moves robot forward 100mm
     94e:	88 ec       	ldi	r24, 0xC8	; 200
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	1c df       	rcall	.-456    	; 0x78c <forward_mm>
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9c e2       	ldi	r25, 0x2C	; 44
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <move_robot+0xa0>
     962:	00 c0       	rjmp	.+0      	; 0x964 <move_robot+0xaa>
     964:	00 00       	nop
		_delay_ms(1000);
		left_degrees(90); //Rotate robot left by 90 degrees
     966:	8a e5       	ldi	r24, 0x5A	; 90
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	19 df       	rcall	.-462    	; 0x79e <left_degrees>
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	9c e2       	ldi	r25, 0x2C	; 44
     972:	21 50       	subi	r18, 0x01	; 1
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <move_robot+0xb8>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <move_robot+0xc2>
     97c:	00 00       	nop
		_delay_ms(1000);
		stop();
     97e:	8f de       	rcall	.-738    	; 0x69e <stop>
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	9c e2       	ldi	r25, 0x2C	; 44
     986:	21 50       	subi	r18, 0x01	; 1
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <move_robot+0xcc>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <move_robot+0xd6>
     990:	00 00       	nop
     992:	55 c0       	rjmp	.+170    	; 0xa3e <move_robot+0x184>
		_delay_ms(1000);
	}
	else if ((row1<row2) && (column1==column2))
     994:	98 17       	cp	r25, r24
     996:	e8 f4       	brcc	.+58     	; 0x9d2 <move_robot+0x118>
     998:	30 91 19 02 	lds	r19, 0x0219
     99c:	20 91 2c 02 	lds	r18, 0x022C
     9a0:	32 13       	cpse	r19, r18
     9a2:	17 c0       	rjmp	.+46     	; 0x9d2 <move_robot+0x118>
	{ // if column1 is to the left of column2
		forward_mm(200); //Moves robot forward 100mm
     9a4:	88 ec       	ldi	r24, 0xC8	; 200
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	f1 de       	rcall	.-542    	; 0x78c <forward_mm>
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	9c e2       	ldi	r25, 0x2C	; 44
     9b0:	21 50       	subi	r18, 0x01	; 1
     9b2:	80 40       	sbci	r24, 0x00	; 0
     9b4:	90 40       	sbci	r25, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <move_robot+0xf6>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <move_robot+0x100>
     9ba:	00 00       	nop
		_delay_ms(1000);
		stop();
     9bc:	70 de       	rcall	.-800    	; 0x69e <stop>
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	9c e2       	ldi	r25, 0x2C	; 44
     9c4:	21 50       	subi	r18, 0x01	; 1
     9c6:	80 40       	sbci	r24, 0x00	; 0
     9c8:	90 40       	sbci	r25, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <move_robot+0x10a>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <move_robot+0x114>
     9ce:	00 00       	nop
     9d0:	36 c0       	rjmp	.+108    	; 0xa3e <move_robot+0x184>
		_delay_ms(1000);
	}
	else if ((row1>row2) && (column1==column2))
     9d2:	89 17       	cp	r24, r25
     9d4:	a0 f5       	brcc	.+104    	; 0xa3e <move_robot+0x184>
     9d6:	90 91 19 02 	lds	r25, 0x0219
     9da:	80 91 2c 02 	lds	r24, 0x022C
     9de:	98 13       	cpse	r25, r24
     9e0:	2e c0       	rjmp	.+92     	; 0xa3e <move_robot+0x184>
	{ // if column1 is to the left of column2
		left_degrees(180); //Rotate robot left by 100 degrees
     9e2:	84 eb       	ldi	r24, 0xB4	; 180
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	db de       	rcall	.-586    	; 0x79e <left_degrees>
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	9c e2       	ldi	r25, 0x2C	; 44
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <move_robot+0x134>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <move_robot+0x13e>
     9f8:	00 00       	nop
		_delay_ms(1000);
		forward_mm(200); //Moves robot forward 100mm
     9fa:	88 ec       	ldi	r24, 0xC8	; 200
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	c6 de       	rcall	.-628    	; 0x78c <forward_mm>
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	9c e2       	ldi	r25, 0x2C	; 44
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <move_robot+0x14c>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <move_robot+0x156>
     a10:	00 00       	nop
		_delay_ms(1000);
		right_degrees(180); //Rotate robot right by 180 degrees
     a12:	84 eb       	ldi	r24, 0xB4	; 180
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	cc de       	rcall	.-616    	; 0x7b0 <right_degrees>
     a18:	2f ef       	ldi	r18, 0xFF	; 255
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	9c e2       	ldi	r25, 0x2C	; 44
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	80 40       	sbci	r24, 0x00	; 0
     a22:	90 40       	sbci	r25, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <move_robot+0x164>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <move_robot+0x16e>
     a28:	00 00       	nop
		_delay_ms(1000);
		stop();
     a2a:	39 de       	rcall	.-910    	; 0x69e <stop>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	9c e2       	ldi	r25, 0x2C	; 44
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <move_robot+0x178>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <move_robot+0x182>
     a3c:	00 00       	nop
		_delay_ms(1000);
	}

	if (UCSR0A & (1<<RXC0))
     a3e:	80 91 c0 00 	lds	r24, 0x00C0
     a42:	88 23       	and	r24, r24
     a44:	0c f0       	brlt	.+2      	; 0xa48 <move_robot+0x18e>
     a46:	56 c0       	rjmp	.+172    	; 0xaf4 <move_robot+0x23a>
	{
		// update column1, row1, column2, and row2 with the next set of column and row addresses received
		
		row1 = row2;
     a48:	80 91 24 02 	lds	r24, 0x0224
     a4c:	80 93 0d 02 	sts	0x020D, r24
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9c e2       	ldi	r25, 0x2C	; 44
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <move_robot+0x19c>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <move_robot+0x1a6>
     a60:	00 00       	nop
		_delay_ms(1000);
		lcd_print(2,1,row1,3);
     a62:	40 91 0d 02 	lds	r20, 0x020D
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	23 e0       	ldi	r18, 0x03	; 3
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	bf dc       	rcall	.-1666   	; 0x3f0 <lcd_print>
		
		column1 = column2;
     a72:	80 91 2c 02 	lds	r24, 0x022C
     a76:	80 93 19 02 	sts	0x0219, r24
     a7a:	2f ef       	ldi	r18, 0xFF	; 255
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	9c e2       	ldi	r25, 0x2C	; 44
     a80:	21 50       	subi	r18, 0x01	; 1
     a82:	80 40       	sbci	r24, 0x00	; 0
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <move_robot+0x1c6>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <move_robot+0x1d0>
     a8a:	00 00       	nop
		_delay_ms(1000);
		lcd_print(2,5,column1,3);
     a8c:	40 91 19 02 	lds	r20, 0x0219
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	23 e0       	ldi	r18, 0x03	; 3
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	65 e0       	ldi	r22, 0x05	; 5
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	aa dc       	rcall	.-1708   	; 0x3f0 <lcd_print>
		
		row2 = USART_Receive(); // receive data from UART
     a9c:	a6 de       	rcall	.-692    	; 0x7ea <USART_Receive>
     a9e:	80 93 24 02 	sts	0x0224, r24
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	9c e2       	ldi	r25, 0x2C	; 44
     aa8:	21 50       	subi	r18, 0x01	; 1
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <move_robot+0x1ee>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <move_robot+0x1f8>
     ab2:	00 00       	nop
		_delay_ms(1000);
		lcd_print(2,10,row2,3);
     ab4:	40 91 24 02 	lds	r20, 0x0224
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	23 e0       	ldi	r18, 0x03	; 3
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	96 dc       	rcall	.-1748   	; 0x3f0 <lcd_print>
		
		USART_Transmit('0');
     ac4:	80 e3       	ldi	r24, 0x30	; 48
     ac6:	89 de       	rcall	.-750    	; 0x7da <USART_Transmit>
		column2 = USART_Receive(); // receive data from UART
     ac8:	90 de       	rcall	.-736    	; 0x7ea <USART_Receive>
     aca:	80 93 2c 02 	sts	0x022C, r24
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9c e2       	ldi	r25, 0x2C	; 44
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	80 40       	sbci	r24, 0x00	; 0
     ad8:	90 40       	sbci	r25, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <move_robot+0x21a>
     adc:	00 c0       	rjmp	.+0      	; 0xade <move_robot+0x224>
     ade:	00 00       	nop
		_delay_ms(1000);
		lcd_print(2,14,column2,3);
     ae0:	40 91 2c 02 	lds	r20, 0x022C
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	23 e0       	ldi	r18, 0x03	; 3
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	6e e0       	ldi	r22, 0x0E	; 14
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	80 dc       	rcall	.-1792   	; 0x3f0 <lcd_print>
		USART_Transmit('1');
     af0:	81 e3       	ldi	r24, 0x31	; 49
     af2:	73 ce       	rjmp	.-794    	; 0x7da <USART_Transmit>
     af4:	08 95       	ret

00000af6 <main>:
	}
}

int main(void)
{
	USART_Init(); // initialize UART communication
     af6:	65 de       	rcall	.-822    	; 0x7c2 <USART_Init>
	init_devices();
     af8:	80 de       	rcall	.-768    	; 0x7fa <init_devices>
	lcd_set_4bit();
     afa:	be db       	rcall	.-2180   	; 0x278 <lcd_set_4bit>
	lcd_init();
     afc:	26 dc       	rcall	.-1972   	; 0x34a <lcd_init>
	
	sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     afe:	8b e0       	ldi	r24, 0x0B	; 11
     b00:	7c db       	rcall	.-2312   	; 0x1fa <ADC_Conversion>
     b02:	80 93 25 02 	sts	0x0225, r24
	value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
     b06:	94 db       	rcall	.-2264   	; 0x230 <Sharp_GP2D12_estimation>
     b08:	90 93 2b 02 	sts	0x022B, r25
     b0c:	80 93 2a 02 	sts	0x022A, r24
	lcd_print(1,7,value,3);
     b10:	23 e0       	ldi	r18, 0x03	; 3
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	ac 01       	movw	r20, r24
     b16:	67 e0       	ldi	r22, 0x07	; 7
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	6a dc       	rcall	.-1836   	; 0x3f0 <lcd_print>
	
	start_row = USART_Receive(); // receive data from UART
     b1c:	66 de       	rcall	.-820    	; 0x7ea <USART_Receive>
     b1e:	80 93 21 02 	sts	0x0221, r24
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9c e2       	ldi	r25, 0x2C	; 44
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x32>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <main+0x3c>
     b32:	00 00       	nop
	_delay_ms(1000);
	lcd_print(2,1,start_row,3);
     b34:	40 91 21 02 	lds	r20, 0x0221
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	23 e0       	ldi	r18, 0x03	; 3
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	56 dc       	rcall	.-1876   	; 0x3f0 <lcd_print>
	
	USART_Transmit('0');
     b44:	80 e3       	ldi	r24, 0x30	; 48
     b46:	49 de       	rcall	.-878    	; 0x7da <USART_Transmit>
	start_column = USART_Receive(); // receive data from UART
     b48:	50 de       	rcall	.-864    	; 0x7ea <USART_Receive>
     b4a:	80 93 0a 02 	sts	0x020A, r24
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9c e2       	ldi	r25, 0x2C	; 44
     b54:	21 50       	subi	r18, 0x01	; 1
     b56:	80 40       	sbci	r24, 0x00	; 0
     b58:	90 40       	sbci	r25, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <main+0x5e>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x68>
     b5e:	00 00       	nop
	_delay_ms(1000);
	lcd_print(2,5,start_column,3);
     b60:	40 91 0a 02 	lds	r20, 0x020A
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	23 e0       	ldi	r18, 0x03	; 3
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	40 dc       	rcall	.-1920   	; 0x3f0 <lcd_print>
	
	USART_Transmit('1');
     b70:	81 e3       	ldi	r24, 0x31	; 49
     b72:	33 de       	rcall	.-922    	; 0x7da <USART_Transmit>
	goal_row = USART_Receive(); // receive data from UART
     b74:	3a de       	rcall	.-908    	; 0x7ea <USART_Receive>
     b76:	80 93 0e 02 	sts	0x020E, r24
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	9c e2       	ldi	r25, 0x2C	; 44
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <main+0x8a>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <main+0x94>
     b8a:	00 00       	nop
	_delay_ms(1000);
	lcd_print(2,10,goal_row,3);
     b8c:	40 91 0e 02 	lds	r20, 0x020E
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	23 e0       	ldi	r18, 0x03	; 3
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	6a e0       	ldi	r22, 0x0A	; 10
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	2a dc       	rcall	.-1964   	; 0x3f0 <lcd_print>
	
	USART_Transmit('0');
     b9c:	80 e3       	ldi	r24, 0x30	; 48
     b9e:	1d de       	rcall	.-966    	; 0x7da <USART_Transmit>
	goal_column = USART_Receive(); // receive data from UART
     ba0:	24 de       	rcall	.-952    	; 0x7ea <USART_Receive>
     ba2:	80 93 10 02 	sts	0x0210, r24
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	9c e2       	ldi	r25, 0x2C	; 44
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0xb6>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0xc0>
     bb6:	00 00       	nop
	_delay_ms(1000);
	lcd_print(2,14,goal_column,3);
     bb8:	40 91 10 02 	lds	r20, 0x0210
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	23 e0       	ldi	r18, 0x03	; 3
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	6e e0       	ldi	r22, 0x0E	; 14
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	14 dc       	rcall	.-2008   	; 0x3f0 <lcd_print>
	while(1)
	{
		//lcd_cursor(1,6);
		//lcd_string("TEAM 6");
		
		if (UCSR0A & (1<<RXC0))
     bc8:	c0 ec       	ldi	r28, 0xC0	; 192
     bca:	d0 e0       	ldi	r29, 0x00	; 0
     bcc:	88 81       	ld	r24, Y
     bce:	88 23       	and	r24, r24
     bd0:	ec f7       	brge	.-6      	; 0xbcc <main+0xd6>
		{
			check_pin();
     bd2:	1a de       	rcall	.-972    	; 0x808 <check_pin>

			while ((goal_column != column2) || (goal_row != row2))
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <main+0xe2>
			{
				move_robot ();
     bd6:	71 de       	rcall	.-798    	; 0x8ba <move_robot>
		
		if (UCSR0A & (1<<RXC0))
		{
			check_pin();

			while ((goal_column != column2) || (goal_row != row2))
     bd8:	90 91 10 02 	lds	r25, 0x0210
     bdc:	80 91 2c 02 	lds	r24, 0x022C
     be0:	98 13       	cpse	r25, r24
     be2:	f9 cf       	rjmp	.-14     	; 0xbd6 <main+0xe0>
     be4:	90 91 0e 02 	lds	r25, 0x020E
     be8:	80 91 24 02 	lds	r24, 0x0224
     bec:	98 13       	cpse	r25, r24
     bee:	f3 cf       	rjmp	.-26     	; 0xbd6 <main+0xe0>
			{
				move_robot ();
			}
			
			check_pin();
     bf0:	0b de       	rcall	.-1002   	; 0x808 <check_pin>
			
			while ((start_column != column2) || (start_row != row2))
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <main+0x100>
			{
				move_robot ();
     bf4:	62 de       	rcall	.-828    	; 0x8ba <move_robot>
				move_robot ();
			}
			
			check_pin();
			
			while ((start_column != column2) || (start_row != row2))
     bf6:	90 91 0a 02 	lds	r25, 0x020A
     bfa:	80 91 2c 02 	lds	r24, 0x022C
     bfe:	98 13       	cpse	r25, r24
     c00:	f9 cf       	rjmp	.-14     	; 0xbf4 <main+0xfe>
     c02:	90 91 21 02 	lds	r25, 0x0221
     c06:	80 91 24 02 	lds	r24, 0x0224
     c0a:	98 13       	cpse	r25, r24
     c0c:	f3 cf       	rjmp	.-26     	; 0xbf4 <main+0xfe>
     c0e:	de cf       	rjmp	.-68     	; 0xbcc <main+0xd6>

00000c10 <__divsf3>:
     c10:	0c d0       	rcall	.+24     	; 0xc2a <__divsf3x>
     c12:	eb c0       	rjmp	.+470    	; 0xdea <__fp_round>
     c14:	e3 d0       	rcall	.+454    	; 0xddc <__fp_pscB>
     c16:	40 f0       	brcs	.+16     	; 0xc28 <__divsf3+0x18>
     c18:	da d0       	rcall	.+436    	; 0xdce <__fp_pscA>
     c1a:	30 f0       	brcs	.+12     	; 0xc28 <__divsf3+0x18>
     c1c:	21 f4       	brne	.+8      	; 0xc26 <__divsf3+0x16>
     c1e:	5f 3f       	cpi	r21, 0xFF	; 255
     c20:	19 f0       	breq	.+6      	; 0xc28 <__divsf3+0x18>
     c22:	cc c0       	rjmp	.+408    	; 0xdbc <__fp_inf>
     c24:	51 11       	cpse	r21, r1
     c26:	15 c1       	rjmp	.+554    	; 0xe52 <__fp_szero>
     c28:	cf c0       	rjmp	.+414    	; 0xdc8 <__fp_nan>

00000c2a <__divsf3x>:
     c2a:	f0 d0       	rcall	.+480    	; 0xe0c <__fp_split3>
     c2c:	98 f3       	brcs	.-26     	; 0xc14 <__divsf3+0x4>

00000c2e <__divsf3_pse>:
     c2e:	99 23       	and	r25, r25
     c30:	c9 f3       	breq	.-14     	; 0xc24 <__divsf3+0x14>
     c32:	55 23       	and	r21, r21
     c34:	b1 f3       	breq	.-20     	; 0xc22 <__divsf3+0x12>
     c36:	95 1b       	sub	r25, r21
     c38:	55 0b       	sbc	r21, r21
     c3a:	bb 27       	eor	r27, r27
     c3c:	aa 27       	eor	r26, r26
     c3e:	62 17       	cp	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	84 07       	cpc	r24, r20
     c44:	38 f0       	brcs	.+14     	; 0xc54 <__divsf3_pse+0x26>
     c46:	9f 5f       	subi	r25, 0xFF	; 255
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	aa 1f       	adc	r26, r26
     c52:	a9 f3       	breq	.-22     	; 0xc3e <__divsf3_pse+0x10>
     c54:	33 d0       	rcall	.+102    	; 0xcbc <__divsf3_pse+0x8e>
     c56:	0e 2e       	mov	r0, r30
     c58:	3a f0       	brmi	.+14     	; 0xc68 <__divsf3_pse+0x3a>
     c5a:	e0 e8       	ldi	r30, 0x80	; 128
     c5c:	30 d0       	rcall	.+96     	; 0xcbe <__divsf3_pse+0x90>
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	50 40       	sbci	r21, 0x00	; 0
     c62:	e6 95       	lsr	r30
     c64:	00 1c       	adc	r0, r0
     c66:	ca f7       	brpl	.-14     	; 0xc5a <__divsf3_pse+0x2c>
     c68:	29 d0       	rcall	.+82     	; 0xcbc <__divsf3_pse+0x8e>
     c6a:	fe 2f       	mov	r31, r30
     c6c:	27 d0       	rcall	.+78     	; 0xcbc <__divsf3_pse+0x8e>
     c6e:	66 0f       	add	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	bb 1f       	adc	r27, r27
     c76:	26 17       	cp	r18, r22
     c78:	37 07       	cpc	r19, r23
     c7a:	48 07       	cpc	r20, r24
     c7c:	ab 07       	cpc	r26, r27
     c7e:	b0 e8       	ldi	r27, 0x80	; 128
     c80:	09 f0       	breq	.+2      	; 0xc84 <__divsf3_pse+0x56>
     c82:	bb 0b       	sbc	r27, r27
     c84:	80 2d       	mov	r24, r0
     c86:	bf 01       	movw	r22, r30
     c88:	ff 27       	eor	r31, r31
     c8a:	93 58       	subi	r25, 0x83	; 131
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	2a f0       	brmi	.+10     	; 0xc9a <__divsf3_pse+0x6c>
     c90:	9e 3f       	cpi	r25, 0xFE	; 254
     c92:	51 05       	cpc	r21, r1
     c94:	68 f0       	brcs	.+26     	; 0xcb0 <__divsf3_pse+0x82>
     c96:	92 c0       	rjmp	.+292    	; 0xdbc <__fp_inf>
     c98:	dc c0       	rjmp	.+440    	; 0xe52 <__fp_szero>
     c9a:	5f 3f       	cpi	r21, 0xFF	; 255
     c9c:	ec f3       	brlt	.-6      	; 0xc98 <__divsf3_pse+0x6a>
     c9e:	98 3e       	cpi	r25, 0xE8	; 232
     ca0:	dc f3       	brlt	.-10     	; 0xc98 <__divsf3_pse+0x6a>
     ca2:	86 95       	lsr	r24
     ca4:	77 95       	ror	r23
     ca6:	67 95       	ror	r22
     ca8:	b7 95       	ror	r27
     caa:	f7 95       	ror	r31
     cac:	9f 5f       	subi	r25, 0xFF	; 255
     cae:	c9 f7       	brne	.-14     	; 0xca2 <__divsf3_pse+0x74>
     cb0:	88 0f       	add	r24, r24
     cb2:	91 1d       	adc	r25, r1
     cb4:	96 95       	lsr	r25
     cb6:	87 95       	ror	r24
     cb8:	97 f9       	bld	r25, 7
     cba:	08 95       	ret
     cbc:	e1 e0       	ldi	r30, 0x01	; 1
     cbe:	66 0f       	add	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	88 1f       	adc	r24, r24
     cc4:	bb 1f       	adc	r27, r27
     cc6:	62 17       	cp	r22, r18
     cc8:	73 07       	cpc	r23, r19
     cca:	84 07       	cpc	r24, r20
     ccc:	ba 07       	cpc	r27, r26
     cce:	20 f0       	brcs	.+8      	; 0xcd8 <__divsf3_pse+0xaa>
     cd0:	62 1b       	sub	r22, r18
     cd2:	73 0b       	sbc	r23, r19
     cd4:	84 0b       	sbc	r24, r20
     cd6:	ba 0b       	sbc	r27, r26
     cd8:	ee 1f       	adc	r30, r30
     cda:	88 f7       	brcc	.-30     	; 0xcbe <__divsf3_pse+0x90>
     cdc:	e0 95       	com	r30
     cde:	08 95       	ret

00000ce0 <__fixsfsi>:
     ce0:	04 d0       	rcall	.+8      	; 0xcea <__fixunssfsi>
     ce2:	68 94       	set
     ce4:	b1 11       	cpse	r27, r1
     ce6:	b5 c0       	rjmp	.+362    	; 0xe52 <__fp_szero>
     ce8:	08 95       	ret

00000cea <__fixunssfsi>:
     cea:	98 d0       	rcall	.+304    	; 0xe1c <__fp_splitA>
     cec:	88 f0       	brcs	.+34     	; 0xd10 <__fixunssfsi+0x26>
     cee:	9f 57       	subi	r25, 0x7F	; 127
     cf0:	90 f0       	brcs	.+36     	; 0xd16 <__fixunssfsi+0x2c>
     cf2:	b9 2f       	mov	r27, r25
     cf4:	99 27       	eor	r25, r25
     cf6:	b7 51       	subi	r27, 0x17	; 23
     cf8:	a0 f0       	brcs	.+40     	; 0xd22 <__fixunssfsi+0x38>
     cfa:	d1 f0       	breq	.+52     	; 0xd30 <__fixunssfsi+0x46>
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	1a f0       	brmi	.+6      	; 0xd0c <__fixunssfsi+0x22>
     d06:	ba 95       	dec	r27
     d08:	c9 f7       	brne	.-14     	; 0xcfc <__fixunssfsi+0x12>
     d0a:	12 c0       	rjmp	.+36     	; 0xd30 <__fixunssfsi+0x46>
     d0c:	b1 30       	cpi	r27, 0x01	; 1
     d0e:	81 f0       	breq	.+32     	; 0xd30 <__fixunssfsi+0x46>
     d10:	9f d0       	rcall	.+318    	; 0xe50 <__fp_zero>
     d12:	b1 e0       	ldi	r27, 0x01	; 1
     d14:	08 95       	ret
     d16:	9c c0       	rjmp	.+312    	; 0xe50 <__fp_zero>
     d18:	67 2f       	mov	r22, r23
     d1a:	78 2f       	mov	r23, r24
     d1c:	88 27       	eor	r24, r24
     d1e:	b8 5f       	subi	r27, 0xF8	; 248
     d20:	39 f0       	breq	.+14     	; 0xd30 <__fixunssfsi+0x46>
     d22:	b9 3f       	cpi	r27, 0xF9	; 249
     d24:	cc f3       	brlt	.-14     	; 0xd18 <__fixunssfsi+0x2e>
     d26:	86 95       	lsr	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b3 95       	inc	r27
     d2e:	d9 f7       	brne	.-10     	; 0xd26 <__fixunssfsi+0x3c>
     d30:	3e f4       	brtc	.+14     	; 0xd40 <__fixunssfsi+0x56>
     d32:	90 95       	com	r25
     d34:	80 95       	com	r24
     d36:	70 95       	com	r23
     d38:	61 95       	neg	r22
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	8f 4f       	sbci	r24, 0xFF	; 255
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	08 95       	ret

00000d42 <__floatunsisf>:
     d42:	e8 94       	clt
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <__floatsisf+0x12>

00000d46 <__floatsisf>:
     d46:	97 fb       	bst	r25, 7
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__floatsisf+0x12>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	99 23       	and	r25, r25
     d5a:	a9 f0       	breq	.+42     	; 0xd86 <__floatsisf+0x40>
     d5c:	f9 2f       	mov	r31, r25
     d5e:	96 e9       	ldi	r25, 0x96	; 150
     d60:	bb 27       	eor	r27, r27
     d62:	93 95       	inc	r25
     d64:	f6 95       	lsr	r31
     d66:	87 95       	ror	r24
     d68:	77 95       	ror	r23
     d6a:	67 95       	ror	r22
     d6c:	b7 95       	ror	r27
     d6e:	f1 11       	cpse	r31, r1
     d70:	f8 cf       	rjmp	.-16     	; 0xd62 <__floatsisf+0x1c>
     d72:	fa f4       	brpl	.+62     	; 0xdb2 <__floatsisf+0x6c>
     d74:	bb 0f       	add	r27, r27
     d76:	11 f4       	brne	.+4      	; 0xd7c <__floatsisf+0x36>
     d78:	60 ff       	sbrs	r22, 0
     d7a:	1b c0       	rjmp	.+54     	; 0xdb2 <__floatsisf+0x6c>
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	8f 4f       	sbci	r24, 0xFF	; 255
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	16 c0       	rjmp	.+44     	; 0xdb2 <__floatsisf+0x6c>
     d86:	88 23       	and	r24, r24
     d88:	11 f0       	breq	.+4      	; 0xd8e <__floatsisf+0x48>
     d8a:	96 e9       	ldi	r25, 0x96	; 150
     d8c:	11 c0       	rjmp	.+34     	; 0xdb0 <__floatsisf+0x6a>
     d8e:	77 23       	and	r23, r23
     d90:	21 f0       	breq	.+8      	; 0xd9a <__floatsisf+0x54>
     d92:	9e e8       	ldi	r25, 0x8E	; 142
     d94:	87 2f       	mov	r24, r23
     d96:	76 2f       	mov	r23, r22
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <__floatsisf+0x5e>
     d9a:	66 23       	and	r22, r22
     d9c:	71 f0       	breq	.+28     	; 0xdba <__floatsisf+0x74>
     d9e:	96 e8       	ldi	r25, 0x86	; 134
     da0:	86 2f       	mov	r24, r22
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	2a f0       	brmi	.+10     	; 0xdb2 <__floatsisf+0x6c>
     da8:	9a 95       	dec	r25
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	da f7       	brpl	.-10     	; 0xda8 <__floatsisf+0x62>
     db2:	88 0f       	add	r24, r24
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	97 f9       	bld	r25, 7
     dba:	08 95       	ret

00000dbc <__fp_inf>:
     dbc:	97 f9       	bld	r25, 7
     dbe:	9f 67       	ori	r25, 0x7F	; 127
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	08 95       	ret

00000dc8 <__fp_nan>:
     dc8:	9f ef       	ldi	r25, 0xFF	; 255
     dca:	80 ec       	ldi	r24, 0xC0	; 192
     dcc:	08 95       	ret

00000dce <__fp_pscA>:
     dce:	00 24       	eor	r0, r0
     dd0:	0a 94       	dec	r0
     dd2:	16 16       	cp	r1, r22
     dd4:	17 06       	cpc	r1, r23
     dd6:	18 06       	cpc	r1, r24
     dd8:	09 06       	cpc	r0, r25
     dda:	08 95       	ret

00000ddc <__fp_pscB>:
     ddc:	00 24       	eor	r0, r0
     dde:	0a 94       	dec	r0
     de0:	12 16       	cp	r1, r18
     de2:	13 06       	cpc	r1, r19
     de4:	14 06       	cpc	r1, r20
     de6:	05 06       	cpc	r0, r21
     de8:	08 95       	ret

00000dea <__fp_round>:
     dea:	09 2e       	mov	r0, r25
     dec:	03 94       	inc	r0
     dee:	00 0c       	add	r0, r0
     df0:	11 f4       	brne	.+4      	; 0xdf6 <__fp_round+0xc>
     df2:	88 23       	and	r24, r24
     df4:	52 f0       	brmi	.+20     	; 0xe0a <__fp_round+0x20>
     df6:	bb 0f       	add	r27, r27
     df8:	40 f4       	brcc	.+16     	; 0xe0a <__fp_round+0x20>
     dfa:	bf 2b       	or	r27, r31
     dfc:	11 f4       	brne	.+4      	; 0xe02 <__fp_round+0x18>
     dfe:	60 ff       	sbrs	r22, 0
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <__fp_round+0x20>
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	08 95       	ret

00000e0c <__fp_split3>:
     e0c:	57 fd       	sbrc	r21, 7
     e0e:	90 58       	subi	r25, 0x80	; 128
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	59 f0       	breq	.+22     	; 0xe2c <__fp_splitA+0x10>
     e16:	5f 3f       	cpi	r21, 0xFF	; 255
     e18:	71 f0       	breq	.+28     	; 0xe36 <__fp_splitA+0x1a>
     e1a:	47 95       	ror	r20

00000e1c <__fp_splitA>:
     e1c:	88 0f       	add	r24, r24
     e1e:	97 fb       	bst	r25, 7
     e20:	99 1f       	adc	r25, r25
     e22:	61 f0       	breq	.+24     	; 0xe3c <__fp_splitA+0x20>
     e24:	9f 3f       	cpi	r25, 0xFF	; 255
     e26:	79 f0       	breq	.+30     	; 0xe46 <__fp_splitA+0x2a>
     e28:	87 95       	ror	r24
     e2a:	08 95       	ret
     e2c:	12 16       	cp	r1, r18
     e2e:	13 06       	cpc	r1, r19
     e30:	14 06       	cpc	r1, r20
     e32:	55 1f       	adc	r21, r21
     e34:	f2 cf       	rjmp	.-28     	; 0xe1a <__fp_split3+0xe>
     e36:	46 95       	lsr	r20
     e38:	f1 df       	rcall	.-30     	; 0xe1c <__fp_splitA>
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <__fp_splitA+0x30>
     e3c:	16 16       	cp	r1, r22
     e3e:	17 06       	cpc	r1, r23
     e40:	18 06       	cpc	r1, r24
     e42:	99 1f       	adc	r25, r25
     e44:	f1 cf       	rjmp	.-30     	; 0xe28 <__fp_splitA+0xc>
     e46:	86 95       	lsr	r24
     e48:	71 05       	cpc	r23, r1
     e4a:	61 05       	cpc	r22, r1
     e4c:	08 94       	sec
     e4e:	08 95       	ret

00000e50 <__fp_zero>:
     e50:	e8 94       	clt

00000e52 <__fp_szero>:
     e52:	bb 27       	eor	r27, r27
     e54:	66 27       	eor	r22, r22
     e56:	77 27       	eor	r23, r23
     e58:	cb 01       	movw	r24, r22
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret

00000e5e <__mulsf3>:
     e5e:	0b d0       	rcall	.+22     	; 0xe76 <__mulsf3x>
     e60:	c4 cf       	rjmp	.-120    	; 0xdea <__fp_round>
     e62:	b5 df       	rcall	.-150    	; 0xdce <__fp_pscA>
     e64:	28 f0       	brcs	.+10     	; 0xe70 <__mulsf3+0x12>
     e66:	ba df       	rcall	.-140    	; 0xddc <__fp_pscB>
     e68:	18 f0       	brcs	.+6      	; 0xe70 <__mulsf3+0x12>
     e6a:	95 23       	and	r25, r21
     e6c:	09 f0       	breq	.+2      	; 0xe70 <__mulsf3+0x12>
     e6e:	a6 cf       	rjmp	.-180    	; 0xdbc <__fp_inf>
     e70:	ab cf       	rjmp	.-170    	; 0xdc8 <__fp_nan>
     e72:	11 24       	eor	r1, r1
     e74:	ee cf       	rjmp	.-36     	; 0xe52 <__fp_szero>

00000e76 <__mulsf3x>:
     e76:	ca df       	rcall	.-108    	; 0xe0c <__fp_split3>
     e78:	a0 f3       	brcs	.-24     	; 0xe62 <__mulsf3+0x4>

00000e7a <__mulsf3_pse>:
     e7a:	95 9f       	mul	r25, r21
     e7c:	d1 f3       	breq	.-12     	; 0xe72 <__mulsf3+0x14>
     e7e:	95 0f       	add	r25, r21
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	55 1f       	adc	r21, r21
     e84:	62 9f       	mul	r22, r18
     e86:	f0 01       	movw	r30, r0
     e88:	72 9f       	mul	r23, r18
     e8a:	bb 27       	eor	r27, r27
     e8c:	f0 0d       	add	r31, r0
     e8e:	b1 1d       	adc	r27, r1
     e90:	63 9f       	mul	r22, r19
     e92:	aa 27       	eor	r26, r26
     e94:	f0 0d       	add	r31, r0
     e96:	b1 1d       	adc	r27, r1
     e98:	aa 1f       	adc	r26, r26
     e9a:	64 9f       	mul	r22, r20
     e9c:	66 27       	eor	r22, r22
     e9e:	b0 0d       	add	r27, r0
     ea0:	a1 1d       	adc	r26, r1
     ea2:	66 1f       	adc	r22, r22
     ea4:	82 9f       	mul	r24, r18
     ea6:	22 27       	eor	r18, r18
     ea8:	b0 0d       	add	r27, r0
     eaa:	a1 1d       	adc	r26, r1
     eac:	62 1f       	adc	r22, r18
     eae:	73 9f       	mul	r23, r19
     eb0:	b0 0d       	add	r27, r0
     eb2:	a1 1d       	adc	r26, r1
     eb4:	62 1f       	adc	r22, r18
     eb6:	83 9f       	mul	r24, r19
     eb8:	a0 0d       	add	r26, r0
     eba:	61 1d       	adc	r22, r1
     ebc:	22 1f       	adc	r18, r18
     ebe:	74 9f       	mul	r23, r20
     ec0:	33 27       	eor	r19, r19
     ec2:	a0 0d       	add	r26, r0
     ec4:	61 1d       	adc	r22, r1
     ec6:	23 1f       	adc	r18, r19
     ec8:	84 9f       	mul	r24, r20
     eca:	60 0d       	add	r22, r0
     ecc:	21 1d       	adc	r18, r1
     ece:	82 2f       	mov	r24, r18
     ed0:	76 2f       	mov	r23, r22
     ed2:	6a 2f       	mov	r22, r26
     ed4:	11 24       	eor	r1, r1
     ed6:	9f 57       	subi	r25, 0x7F	; 127
     ed8:	50 40       	sbci	r21, 0x00	; 0
     eda:	8a f0       	brmi	.+34     	; 0xefe <__mulsf3_pse+0x84>
     edc:	e1 f0       	breq	.+56     	; 0xf16 <__mulsf3_pse+0x9c>
     ede:	88 23       	and	r24, r24
     ee0:	4a f0       	brmi	.+18     	; 0xef4 <__mulsf3_pse+0x7a>
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	bb 1f       	adc	r27, r27
     ee8:	66 1f       	adc	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	91 50       	subi	r25, 0x01	; 1
     ef0:	50 40       	sbci	r21, 0x00	; 0
     ef2:	a9 f7       	brne	.-22     	; 0xede <__mulsf3_pse+0x64>
     ef4:	9e 3f       	cpi	r25, 0xFE	; 254
     ef6:	51 05       	cpc	r21, r1
     ef8:	70 f0       	brcs	.+28     	; 0xf16 <__mulsf3_pse+0x9c>
     efa:	60 cf       	rjmp	.-320    	; 0xdbc <__fp_inf>
     efc:	aa cf       	rjmp	.-172    	; 0xe52 <__fp_szero>
     efe:	5f 3f       	cpi	r21, 0xFF	; 255
     f00:	ec f3       	brlt	.-6      	; 0xefc <__mulsf3_pse+0x82>
     f02:	98 3e       	cpi	r25, 0xE8	; 232
     f04:	dc f3       	brlt	.-10     	; 0xefc <__mulsf3_pse+0x82>
     f06:	86 95       	lsr	r24
     f08:	77 95       	ror	r23
     f0a:	67 95       	ror	r22
     f0c:	b7 95       	ror	r27
     f0e:	f7 95       	ror	r31
     f10:	e7 95       	ror	r30
     f12:	9f 5f       	subi	r25, 0xFF	; 255
     f14:	c1 f7       	brne	.-16     	; 0xf06 <__mulsf3_pse+0x8c>
     f16:	fe 2b       	or	r31, r30
     f18:	88 0f       	add	r24, r24
     f1a:	91 1d       	adc	r25, r1
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	97 f9       	bld	r25, 7
     f22:	08 95       	ret

00000f24 <pow>:
     f24:	fa 01       	movw	r30, r20
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	30 96       	adiw	r30, 0x00	; 0
     f2c:	21 05       	cpc	r18, r1
     f2e:	31 05       	cpc	r19, r1
     f30:	99 f1       	breq	.+102    	; 0xf98 <pow+0x74>
     f32:	61 15       	cp	r22, r1
     f34:	71 05       	cpc	r23, r1
     f36:	61 f4       	brne	.+24     	; 0xf50 <pow+0x2c>
     f38:	80 38       	cpi	r24, 0x80	; 128
     f3a:	bf e3       	ldi	r27, 0x3F	; 63
     f3c:	9b 07       	cpc	r25, r27
     f3e:	49 f1       	breq	.+82     	; 0xf92 <pow+0x6e>
     f40:	68 94       	set
     f42:	90 38       	cpi	r25, 0x80	; 128
     f44:	81 05       	cpc	r24, r1
     f46:	61 f0       	breq	.+24     	; 0xf60 <pow+0x3c>
     f48:	80 38       	cpi	r24, 0x80	; 128
     f4a:	bf ef       	ldi	r27, 0xFF	; 255
     f4c:	9b 07       	cpc	r25, r27
     f4e:	41 f0       	breq	.+16     	; 0xf60 <pow+0x3c>
     f50:	99 23       	and	r25, r25
     f52:	42 f5       	brpl	.+80     	; 0xfa4 <pow+0x80>
     f54:	ff 3f       	cpi	r31, 0xFF	; 255
     f56:	e1 05       	cpc	r30, r1
     f58:	31 05       	cpc	r19, r1
     f5a:	21 05       	cpc	r18, r1
     f5c:	11 f1       	breq	.+68     	; 0xfa2 <pow+0x7e>
     f5e:	e8 94       	clt
     f60:	08 94       	sec
     f62:	e7 95       	ror	r30
     f64:	d9 01       	movw	r26, r18
     f66:	aa 23       	and	r26, r26
     f68:	29 f4       	brne	.+10     	; 0xf74 <pow+0x50>
     f6a:	ab 2f       	mov	r26, r27
     f6c:	be 2f       	mov	r27, r30
     f6e:	f8 5f       	subi	r31, 0xF8	; 248
     f70:	d0 f3       	brcs	.-12     	; 0xf66 <pow+0x42>
     f72:	10 c0       	rjmp	.+32     	; 0xf94 <pow+0x70>
     f74:	ff 5f       	subi	r31, 0xFF	; 255
     f76:	70 f4       	brcc	.+28     	; 0xf94 <pow+0x70>
     f78:	a6 95       	lsr	r26
     f7a:	e0 f7       	brcc	.-8      	; 0xf74 <pow+0x50>
     f7c:	f7 39       	cpi	r31, 0x97	; 151
     f7e:	50 f0       	brcs	.+20     	; 0xf94 <pow+0x70>
     f80:	19 f0       	breq	.+6      	; 0xf88 <pow+0x64>
     f82:	ff 3a       	cpi	r31, 0xAF	; 175
     f84:	38 f4       	brcc	.+14     	; 0xf94 <pow+0x70>
     f86:	9f 77       	andi	r25, 0x7F	; 127
     f88:	9f 93       	push	r25
     f8a:	0c d0       	rcall	.+24     	; 0xfa4 <pow+0x80>
     f8c:	0f 90       	pop	r0
     f8e:	07 fc       	sbrc	r0, 7
     f90:	90 58       	subi	r25, 0x80	; 128
     f92:	08 95       	ret
     f94:	3e f0       	brts	.+14     	; 0xfa4 <pow+0x80>
     f96:	18 cf       	rjmp	.-464    	; 0xdc8 <__fp_nan>
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	9f e3       	ldi	r25, 0x3F	; 63
     fa0:	08 95       	ret
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	9f 77       	andi	r25, 0x7F	; 127
     fa6:	5f 93       	push	r21
     fa8:	4f 93       	push	r20
     faa:	3f 93       	push	r19
     fac:	2f 93       	push	r18
     fae:	9e d0       	rcall	.+316    	; 0x10ec <log>
     fb0:	2f 91       	pop	r18
     fb2:	3f 91       	pop	r19
     fb4:	4f 91       	pop	r20
     fb6:	5f 91       	pop	r21
     fb8:	52 df       	rcall	.-348    	; 0xe5e <__mulsf3>
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <exp>
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <pow+0xa0>
     fbe:	0e f0       	brts	.+2      	; 0xfc2 <pow+0x9e>
     fc0:	fd ce       	rjmp	.-518    	; 0xdbc <__fp_inf>
     fc2:	46 cf       	rjmp	.-372    	; 0xe50 <__fp_zero>
     fc4:	01 cf       	rjmp	.-510    	; 0xdc8 <__fp_nan>

00000fc6 <exp>:
     fc6:	2a df       	rcall	.-428    	; 0xe1c <__fp_splitA>
     fc8:	c8 f3       	brcs	.-14     	; 0xfbc <pow+0x98>
     fca:	96 38       	cpi	r25, 0x86	; 134
     fcc:	c0 f7       	brcc	.-16     	; 0xfbe <pow+0x9a>
     fce:	07 f8       	bld	r0, 7
     fd0:	0f 92       	push	r0
     fd2:	e8 94       	clt
     fd4:	2b e3       	ldi	r18, 0x3B	; 59
     fd6:	3a ea       	ldi	r19, 0xAA	; 170
     fd8:	48 eb       	ldi	r20, 0xB8	; 184
     fda:	5f e7       	ldi	r21, 0x7F	; 127
     fdc:	4e df       	rcall	.-356    	; 0xe7a <__mulsf3_pse>
     fde:	0f 92       	push	r0
     fe0:	0f 92       	push	r0
     fe2:	0f 92       	push	r0
     fe4:	4d b7       	in	r20, 0x3d	; 61
     fe6:	5e b7       	in	r21, 0x3e	; 62
     fe8:	0f 92       	push	r0
     fea:	c0 d0       	rcall	.+384    	; 0x116c <modf>
     fec:	e4 ee       	ldi	r30, 0xE4	; 228
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	16 d0       	rcall	.+44     	; 0x101e <__fp_powser>
     ff2:	4f 91       	pop	r20
     ff4:	5f 91       	pop	r21
     ff6:	ef 91       	pop	r30
     ff8:	ff 91       	pop	r31
     ffa:	e5 95       	asr	r30
     ffc:	ee 1f       	adc	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	49 f0       	breq	.+18     	; 0x1014 <exp+0x4e>
    1002:	fe 57       	subi	r31, 0x7E	; 126
    1004:	e0 68       	ori	r30, 0x80	; 128
    1006:	44 27       	eor	r20, r20
    1008:	ee 0f       	add	r30, r30
    100a:	44 1f       	adc	r20, r20
    100c:	fa 95       	dec	r31
    100e:	e1 f7       	brne	.-8      	; 0x1008 <exp+0x42>
    1010:	41 95       	neg	r20
    1012:	55 0b       	sbc	r21, r21
    1014:	32 d0       	rcall	.+100    	; 0x107a <ldexp>
    1016:	0f 90       	pop	r0
    1018:	07 fe       	sbrs	r0, 7
    101a:	26 c0       	rjmp	.+76     	; 0x1068 <inverse>
    101c:	08 95       	ret

0000101e <__fp_powser>:
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	1f 93       	push	r17
    1024:	0f 93       	push	r16
    1026:	ff 92       	push	r15
    1028:	ef 92       	push	r14
    102a:	df 92       	push	r13
    102c:	7b 01       	movw	r14, r22
    102e:	8c 01       	movw	r16, r24
    1030:	68 94       	set
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__fp_powser+0x20>
    1034:	da 2e       	mov	r13, r26
    1036:	ef 01       	movw	r28, r30
    1038:	1e df       	rcall	.-452    	; 0xe76 <__mulsf3x>
    103a:	fe 01       	movw	r30, r28
    103c:	e8 94       	clt
    103e:	a5 91       	lpm	r26, Z+
    1040:	25 91       	lpm	r18, Z+
    1042:	35 91       	lpm	r19, Z+
    1044:	45 91       	lpm	r20, Z+
    1046:	55 91       	lpm	r21, Z+
    1048:	ae f3       	brts	.-22     	; 0x1034 <__fp_powser+0x16>
    104a:	ef 01       	movw	r28, r30
    104c:	d4 d0       	rcall	.+424    	; 0x11f6 <__addsf3x>
    104e:	fe 01       	movw	r30, r28
    1050:	97 01       	movw	r18, r14
    1052:	a8 01       	movw	r20, r16
    1054:	da 94       	dec	r13
    1056:	79 f7       	brne	.-34     	; 0x1036 <__fp_powser+0x18>
    1058:	df 90       	pop	r13
    105a:	ef 90       	pop	r14
    105c:	ff 90       	pop	r15
    105e:	0f 91       	pop	r16
    1060:	1f 91       	pop	r17
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <inverse>:
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	9f e3       	ldi	r25, 0x3F	; 63
    1074:	cd cd       	rjmp	.-1126   	; 0xc10 <__divsf3>
    1076:	a2 ce       	rjmp	.-700    	; 0xdbc <__fp_inf>
    1078:	11 c1       	rjmp	.+546    	; 0x129c <__fp_mpack>

0000107a <ldexp>:
    107a:	d0 de       	rcall	.-608    	; 0xe1c <__fp_splitA>
    107c:	e8 f3       	brcs	.-6      	; 0x1078 <inverse+0x10>
    107e:	99 23       	and	r25, r25
    1080:	d9 f3       	breq	.-10     	; 0x1078 <inverse+0x10>
    1082:	94 0f       	add	r25, r20
    1084:	51 1d       	adc	r21, r1
    1086:	bb f3       	brvs	.-18     	; 0x1076 <inverse+0xe>
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	94 f0       	brlt	.+36     	; 0x10b2 <ldexp+0x38>
    108e:	59 f0       	breq	.+22     	; 0x10a6 <ldexp+0x2c>
    1090:	88 23       	and	r24, r24
    1092:	32 f0       	brmi	.+12     	; 0x10a0 <ldexp+0x26>
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	50 40       	sbci	r21, 0x00	; 0
    109e:	c1 f7       	brne	.-16     	; 0x1090 <ldexp+0x16>
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	51 05       	cpc	r21, r1
    10a4:	44 f7       	brge	.-48     	; 0x1076 <inverse+0xe>
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	ac f0       	brlt	.+42     	; 0x10e0 <ldexp+0x66>
    10b6:	98 3e       	cpi	r25, 0xE8	; 232
    10b8:	9c f0       	brlt	.+38     	; 0x10e0 <ldexp+0x66>
    10ba:	bb 27       	eor	r27, r27
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <ldexp+0x4e>
    10c6:	b1 60       	ori	r27, 0x01	; 1
    10c8:	93 95       	inc	r25
    10ca:	c1 f7       	brne	.-16     	; 0x10bc <ldexp+0x42>
    10cc:	bb 0f       	add	r27, r27
    10ce:	58 f7       	brcc	.-42     	; 0x10a6 <ldexp+0x2c>
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <ldexp+0x5c>
    10d2:	60 ff       	sbrs	r22, 0
    10d4:	e8 cf       	rjmp	.-48     	; 0x10a6 <ldexp+0x2c>
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	e3 cf       	rjmp	.-58     	; 0x10a6 <ldexp+0x2c>
    10e0:	b8 ce       	rjmp	.-656    	; 0xe52 <__fp_szero>
    10e2:	0e f0       	brts	.+2      	; 0x10e6 <ldexp+0x6c>
    10e4:	db c0       	rjmp	.+438    	; 0x129c <__fp_mpack>
    10e6:	70 ce       	rjmp	.-800    	; 0xdc8 <__fp_nan>
    10e8:	68 94       	set
    10ea:	68 ce       	rjmp	.-816    	; 0xdbc <__fp_inf>

000010ec <log>:
    10ec:	97 de       	rcall	.-722    	; 0xe1c <__fp_splitA>
    10ee:	c8 f3       	brcs	.-14     	; 0x10e2 <ldexp+0x68>
    10f0:	99 23       	and	r25, r25
    10f2:	d1 f3       	breq	.-12     	; 0x10e8 <ldexp+0x6e>
    10f4:	c6 f3       	brts	.-16     	; 0x10e6 <ldexp+0x6c>
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	1f 93       	push	r17
    10fc:	0f 93       	push	r16
    10fe:	ff 92       	push	r15
    1100:	c9 2f       	mov	r28, r25
    1102:	dd 27       	eor	r29, r29
    1104:	88 23       	and	r24, r24
    1106:	2a f0       	brmi	.+10     	; 0x1112 <log+0x26>
    1108:	21 97       	sbiw	r28, 0x01	; 1
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	da f7       	brpl	.-10     	; 0x1108 <log+0x1c>
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f eb       	ldi	r21, 0xBF	; 191
    111a:	9f e3       	ldi	r25, 0x3F	; 63
    111c:	88 39       	cpi	r24, 0x98	; 152
    111e:	20 f0       	brcs	.+8      	; 0x1128 <log+0x3c>
    1120:	80 3e       	cpi	r24, 0xE0	; 224
    1122:	30 f0       	brcs	.+12     	; 0x1130 <log+0x44>
    1124:	21 96       	adiw	r28, 0x01	; 1
    1126:	8f 77       	andi	r24, 0x7F	; 127
    1128:	55 d0       	rcall	.+170    	; 0x11d4 <__addsf3>
    112a:	ec e0       	ldi	r30, 0x0C	; 12
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <log+0x4a>
    1130:	51 d0       	rcall	.+162    	; 0x11d4 <__addsf3>
    1132:	e9 e3       	ldi	r30, 0x39	; 57
    1134:	f1 e0       	ldi	r31, 0x01	; 1
    1136:	73 df       	rcall	.-282    	; 0x101e <__fp_powser>
    1138:	8b 01       	movw	r16, r22
    113a:	be 01       	movw	r22, r28
    113c:	ec 01       	movw	r28, r24
    113e:	fb 2e       	mov	r15, r27
    1140:	6f 57       	subi	r22, 0x7F	; 127
    1142:	71 09       	sbc	r23, r1
    1144:	75 95       	asr	r23
    1146:	77 1f       	adc	r23, r23
    1148:	88 0b       	sbc	r24, r24
    114a:	99 0b       	sbc	r25, r25
    114c:	fc dd       	rcall	.-1032   	; 0xd46 <__floatsisf>
    114e:	28 e1       	ldi	r18, 0x18	; 24
    1150:	32 e7       	ldi	r19, 0x72	; 114
    1152:	41 e3       	ldi	r20, 0x31	; 49
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	8f de       	rcall	.-738    	; 0xe76 <__mulsf3x>
    1158:	af 2d       	mov	r26, r15
    115a:	98 01       	movw	r18, r16
    115c:	ae 01       	movw	r20, r28
    115e:	ff 90       	pop	r15
    1160:	0f 91       	pop	r16
    1162:	1f 91       	pop	r17
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	46 d0       	rcall	.+140    	; 0x11f6 <__addsf3x>
    116a:	3f ce       	rjmp	.-898    	; 0xdea <__fp_round>

0000116c <modf>:
    116c:	fa 01       	movw	r30, r20
    116e:	dc 01       	movw	r26, r24
    1170:	aa 0f       	add	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	bf 57       	subi	r27, 0x7F	; 127
    117a:	28 f4       	brcc	.+10     	; 0x1186 <modf+0x1a>
    117c:	22 27       	eor	r18, r18
    117e:	33 27       	eor	r19, r19
    1180:	44 27       	eor	r20, r20
    1182:	50 78       	andi	r21, 0x80	; 128
    1184:	1f c0       	rjmp	.+62     	; 0x11c4 <modf+0x58>
    1186:	b7 51       	subi	r27, 0x17	; 23
    1188:	88 f4       	brcc	.+34     	; 0x11ac <modf+0x40>
    118a:	ab 2f       	mov	r26, r27
    118c:	00 24       	eor	r0, r0
    118e:	46 95       	lsr	r20
    1190:	37 95       	ror	r19
    1192:	27 95       	ror	r18
    1194:	01 1c       	adc	r0, r1
    1196:	a3 95       	inc	r26
    1198:	d2 f3       	brmi	.-12     	; 0x118e <modf+0x22>
    119a:	00 20       	and	r0, r0
    119c:	69 f0       	breq	.+26     	; 0x11b8 <modf+0x4c>
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	44 1f       	adc	r20, r20
    11a4:	b3 95       	inc	r27
    11a6:	da f3       	brmi	.-10     	; 0x119e <modf+0x32>
    11a8:	0d d0       	rcall	.+26     	; 0x11c4 <modf+0x58>
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <__subsf3>
    11ac:	61 30       	cpi	r22, 0x01	; 1
    11ae:	71 05       	cpc	r23, r1
    11b0:	a0 e8       	ldi	r26, 0x80	; 128
    11b2:	8a 07       	cpc	r24, r26
    11b4:	b9 46       	sbci	r27, 0x69	; 105
    11b6:	30 f4       	brcc	.+12     	; 0x11c4 <modf+0x58>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	66 27       	eor	r22, r22
    11be:	77 27       	eor	r23, r23
    11c0:	88 27       	eor	r24, r24
    11c2:	90 78       	andi	r25, 0x80	; 128
    11c4:	30 96       	adiw	r30, 0x00	; 0
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <modf+0x64>
    11c8:	20 83       	st	Z, r18
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	42 83       	std	Z+2, r20	; 0x02
    11ce:	53 83       	std	Z+3, r21	; 0x03
    11d0:	08 95       	ret

000011d2 <__subsf3>:
    11d2:	50 58       	subi	r21, 0x80	; 128

000011d4 <__addsf3>:
    11d4:	bb 27       	eor	r27, r27
    11d6:	aa 27       	eor	r26, r26
    11d8:	0e d0       	rcall	.+28     	; 0x11f6 <__addsf3x>
    11da:	07 ce       	rjmp	.-1010   	; 0xdea <__fp_round>
    11dc:	f8 dd       	rcall	.-1040   	; 0xdce <__fp_pscA>
    11de:	30 f0       	brcs	.+12     	; 0x11ec <__addsf3+0x18>
    11e0:	fd dd       	rcall	.-1030   	; 0xddc <__fp_pscB>
    11e2:	20 f0       	brcs	.+8      	; 0x11ec <__addsf3+0x18>
    11e4:	31 f4       	brne	.+12     	; 0x11f2 <__addsf3+0x1e>
    11e6:	9f 3f       	cpi	r25, 0xFF	; 255
    11e8:	11 f4       	brne	.+4      	; 0x11ee <__addsf3+0x1a>
    11ea:	1e f4       	brtc	.+6      	; 0x11f2 <__addsf3+0x1e>
    11ec:	ed cd       	rjmp	.-1062   	; 0xdc8 <__fp_nan>
    11ee:	0e f4       	brtc	.+2      	; 0x11f2 <__addsf3+0x1e>
    11f0:	e0 95       	com	r30
    11f2:	e7 fb       	bst	r30, 7
    11f4:	e3 cd       	rjmp	.-1082   	; 0xdbc <__fp_inf>

000011f6 <__addsf3x>:
    11f6:	e9 2f       	mov	r30, r25
    11f8:	09 de       	rcall	.-1006   	; 0xe0c <__fp_split3>
    11fa:	80 f3       	brcs	.-32     	; 0x11dc <__addsf3+0x8>
    11fc:	ba 17       	cp	r27, r26
    11fe:	62 07       	cpc	r22, r18
    1200:	73 07       	cpc	r23, r19
    1202:	84 07       	cpc	r24, r20
    1204:	95 07       	cpc	r25, r21
    1206:	18 f0       	brcs	.+6      	; 0x120e <__addsf3x+0x18>
    1208:	71 f4       	brne	.+28     	; 0x1226 <__addsf3x+0x30>
    120a:	9e f5       	brtc	.+102    	; 0x1272 <__addsf3x+0x7c>
    120c:	21 ce       	rjmp	.-958    	; 0xe50 <__fp_zero>
    120e:	0e f4       	brtc	.+2      	; 0x1212 <__addsf3x+0x1c>
    1210:	e0 95       	com	r30
    1212:	0b 2e       	mov	r0, r27
    1214:	ba 2f       	mov	r27, r26
    1216:	a0 2d       	mov	r26, r0
    1218:	0b 01       	movw	r0, r22
    121a:	b9 01       	movw	r22, r18
    121c:	90 01       	movw	r18, r0
    121e:	0c 01       	movw	r0, r24
    1220:	ca 01       	movw	r24, r20
    1222:	a0 01       	movw	r20, r0
    1224:	11 24       	eor	r1, r1
    1226:	ff 27       	eor	r31, r31
    1228:	59 1b       	sub	r21, r25
    122a:	99 f0       	breq	.+38     	; 0x1252 <__addsf3x+0x5c>
    122c:	59 3f       	cpi	r21, 0xF9	; 249
    122e:	50 f4       	brcc	.+20     	; 0x1244 <__addsf3x+0x4e>
    1230:	50 3e       	cpi	r21, 0xE0	; 224
    1232:	68 f1       	brcs	.+90     	; 0x128e <__addsf3x+0x98>
    1234:	1a 16       	cp	r1, r26
    1236:	f0 40       	sbci	r31, 0x00	; 0
    1238:	a2 2f       	mov	r26, r18
    123a:	23 2f       	mov	r18, r19
    123c:	34 2f       	mov	r19, r20
    123e:	44 27       	eor	r20, r20
    1240:	58 5f       	subi	r21, 0xF8	; 248
    1242:	f3 cf       	rjmp	.-26     	; 0x122a <__addsf3x+0x34>
    1244:	46 95       	lsr	r20
    1246:	37 95       	ror	r19
    1248:	27 95       	ror	r18
    124a:	a7 95       	ror	r26
    124c:	f0 40       	sbci	r31, 0x00	; 0
    124e:	53 95       	inc	r21
    1250:	c9 f7       	brne	.-14     	; 0x1244 <__addsf3x+0x4e>
    1252:	7e f4       	brtc	.+30     	; 0x1272 <__addsf3x+0x7c>
    1254:	1f 16       	cp	r1, r31
    1256:	ba 0b       	sbc	r27, r26
    1258:	62 0b       	sbc	r22, r18
    125a:	73 0b       	sbc	r23, r19
    125c:	84 0b       	sbc	r24, r20
    125e:	ba f0       	brmi	.+46     	; 0x128e <__addsf3x+0x98>
    1260:	91 50       	subi	r25, 0x01	; 1
    1262:	a1 f0       	breq	.+40     	; 0x128c <__addsf3x+0x96>
    1264:	ff 0f       	add	r31, r31
    1266:	bb 1f       	adc	r27, r27
    1268:	66 1f       	adc	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	c2 f7       	brpl	.-16     	; 0x1260 <__addsf3x+0x6a>
    1270:	0e c0       	rjmp	.+28     	; 0x128e <__addsf3x+0x98>
    1272:	ba 0f       	add	r27, r26
    1274:	62 1f       	adc	r22, r18
    1276:	73 1f       	adc	r23, r19
    1278:	84 1f       	adc	r24, r20
    127a:	48 f4       	brcc	.+18     	; 0x128e <__addsf3x+0x98>
    127c:	87 95       	ror	r24
    127e:	77 95       	ror	r23
    1280:	67 95       	ror	r22
    1282:	b7 95       	ror	r27
    1284:	f7 95       	ror	r31
    1286:	9e 3f       	cpi	r25, 0xFE	; 254
    1288:	08 f0       	brcs	.+2      	; 0x128c <__addsf3x+0x96>
    128a:	b3 cf       	rjmp	.-154    	; 0x11f2 <__addsf3+0x1e>
    128c:	93 95       	inc	r25
    128e:	88 0f       	add	r24, r24
    1290:	08 f0       	brcs	.+2      	; 0x1294 <__addsf3x+0x9e>
    1292:	99 27       	eor	r25, r25
    1294:	ee 0f       	add	r30, r30
    1296:	97 95       	ror	r25
    1298:	87 95       	ror	r24
    129a:	08 95       	ret

0000129c <__fp_mpack>:
    129c:	9f 3f       	cpi	r25, 0xFF	; 255
    129e:	31 f0       	breq	.+12     	; 0x12ac <__fp_mpack_finite+0xc>

000012a0 <__fp_mpack_finite>:
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	20 f4       	brcc	.+8      	; 0x12ac <__fp_mpack_finite+0xc>
    12a4:	87 95       	ror	r24
    12a6:	77 95       	ror	r23
    12a8:	67 95       	ror	r22
    12aa:	b7 95       	ror	r27
    12ac:	88 0f       	add	r24, r24
    12ae:	91 1d       	adc	r25, r1
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <__umulhisi3>:
    12b8:	a2 9f       	mul	r26, r18
    12ba:	b0 01       	movw	r22, r0
    12bc:	b3 9f       	mul	r27, r19
    12be:	c0 01       	movw	r24, r0
    12c0:	a3 9f       	mul	r26, r19
    12c2:	70 0d       	add	r23, r0
    12c4:	81 1d       	adc	r24, r1
    12c6:	11 24       	eor	r1, r1
    12c8:	91 1d       	adc	r25, r1
    12ca:	b2 9f       	mul	r27, r18
    12cc:	70 0d       	add	r23, r0
    12ce:	81 1d       	adc	r24, r1
    12d0:	11 24       	eor	r1, r1
    12d2:	91 1d       	adc	r25, r1
    12d4:	08 95       	ret

000012d6 <_exit>:
    12d6:	f8 94       	cli

000012d8 <__stop_program>:
    12d8:	ff cf       	rjmp	.-2      	; 0x12d8 <__stop_program>
